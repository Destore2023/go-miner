// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: rpc.proto

package rpcprotobuf

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetBlockHashByHeightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GetBlockHashByHeightRequest) Reset() {
	*x = GetBlockHashByHeightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockHashByHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHashByHeightRequest) ProtoMessage() {}

func (x *GetBlockHashByHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHashByHeightRequest.ProtoReflect.Descriptor instead.
func (*GetBlockHashByHeightRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

func (x *GetBlockHashByHeightRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GetBlockHashByHeightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetBlockHashByHeightResponse) Reset() {
	*x = GetBlockHashByHeightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockHashByHeightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHashByHeightResponse) ProtoMessage() {}

func (x *GetBlockHashByHeightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHashByHeightResponse.ProtoReflect.Descriptor instead.
func (*GetBlockHashByHeightResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

func (x *GetBlockHashByHeightResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetBestBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash   string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GetBestBlockResponse) Reset() {
	*x = GetBestBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBestBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBestBlockResponse) ProtoMessage() {}

func (x *GetBestBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBestBlockResponse.ProtoReflect.Descriptor instead.
func (*GetBestBlockResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

func (x *GetBestBlockResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *GetBestBlockResponse) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GetBestBlockHashResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetBestBlockHashResponse) Reset() {
	*x = GetBestBlockHashResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBestBlockHashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBestBlockHashResponse) ProtoMessage() {}

func (x *GetBestBlockHashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBestBlockHashResponse.ProtoReflect.Descriptor instead.
func (*GetBestBlockHashResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetBestBlockHashResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetBlockRequest) Reset() {
	*x = GetBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockRequest) ProtoMessage() {}

func (x *GetBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockRequest.ProtoReflect.Descriptor instead.
func (*GetBlockRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

func (x *GetBlockRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetBlockByHeightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GetBlockByHeightRequest) Reset() {
	*x = GetBlockByHeightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockByHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockByHeightRequest) ProtoMessage() {}

func (x *GetBlockByHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockByHeightRequest.ProtoReflect.Descriptor instead.
func (*GetBlockByHeightRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

func (x *GetBlockByHeightRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X         string `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	XPrime    string `protobuf:"bytes,2,opt,name=x_prime,json=xPrime,proto3" json:"x_prime,omitempty"`
	BitLength uint32 `protobuf:"varint,3,opt,name=bit_length,json=bitLength,proto3" json:"bit_length,omitempty"`
}

func (x *Proof) Reset() {
	*x = Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

func (x *Proof) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

func (x *Proof) GetX() string {
	if x != nil {
		return x.X
	}
	return ""
}

func (x *Proof) GetXPrime() string {
	if x != nil {
		return x.XPrime
	}
	return ""
}

func (x *Proof) GetBitLength() uint32 {
	if x != nil {
		return x.BitLength
	}
	return 0
}

type PoCSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R string `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
	S string `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *PoCSignature) Reset() {
	*x = PoCSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoCSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoCSignature) ProtoMessage() {}

func (x *PoCSignature) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoCSignature.ProtoReflect.Descriptor instead.
func (*PoCSignature) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

func (x *PoCSignature) GetR() string {
	if x != nil {
		return x.R
	}
	return ""
}

func (x *PoCSignature) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

type BlockInfoForTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height    uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	BlockHash string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *BlockInfoForTx) Reset() {
	*x = BlockInfoForTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockInfoForTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInfoForTx) ProtoMessage() {}

func (x *BlockInfoForTx) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockInfoForTx.ProtoReflect.Descriptor instead.
func (*BlockInfoForTx) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

func (x *BlockInfoForTx) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockInfoForTx) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *BlockInfoForTx) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Vin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid     string   `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Vout     uint32   `protobuf:"varint,2,opt,name=vout,proto3" json:"vout,omitempty"`
	Sequence uint64   `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Witness  []string `protobuf:"bytes,4,rep,name=witness,proto3" json:"witness,omitempty"`
}

func (x *Vin) Reset() {
	*x = Vin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vin) ProtoMessage() {}

func (x *Vin) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vin.ProtoReflect.Descriptor instead.
func (*Vin) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

func (x *Vin) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *Vin) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

func (x *Vin) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Vin) GetWitness() []string {
	if x != nil {
		return x.Witness
	}
	return nil
}

type ToAddressForTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []string `protobuf:"bytes,1,rep,name=address,proto3" json:"address,omitempty"`
	Value   string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ToAddressForTx) Reset() {
	*x = ToAddressForTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToAddressForTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToAddressForTx) ProtoMessage() {}

func (x *ToAddressForTx) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToAddressForTx.ProtoReflect.Descriptor instead.
func (*ToAddressForTx) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

func (x *ToAddressForTx) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ToAddressForTx) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type InputsInTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid    string   `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Index   uint32   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Address []string `protobuf:"bytes,3,rep,name=address,proto3" json:"address,omitempty"`
	Value   string   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InputsInTx) Reset() {
	*x = InputsInTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsInTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsInTx) ProtoMessage() {}

func (x *InputsInTx) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsInTx.ProtoReflect.Descriptor instead.
func (*InputsInTx) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

func (x *InputsInTx) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *InputsInTx) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *InputsInTx) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *InputsInTx) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ScriptPubKeyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asm           string   `protobuf:"bytes,1,opt,name=asm,proto3" json:"asm,omitempty"`
	Hex           string   `protobuf:"bytes,2,opt,name=hex,proto3" json:"hex,omitempty"`
	ReqSigs       uint32   `protobuf:"varint,3,opt,name=req_sigs,json=reqSigs,proto3" json:"req_sigs,omitempty"`
	Type          string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	FrozenPeriod  uint32   `protobuf:"varint,5,opt,name=frozen_period,json=frozenPeriod,proto3" json:"frozen_period,omitempty"`
	RewardAddress string   `protobuf:"bytes,6,opt,name=reward_address,json=rewardAddress,proto3" json:"reward_address,omitempty"`
	Addresses     []string `protobuf:"bytes,7,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *ScriptPubKeyResult) Reset() {
	*x = ScriptPubKeyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptPubKeyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptPubKeyResult) ProtoMessage() {}

func (x *ScriptPubKeyResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptPubKeyResult.ProtoReflect.Descriptor instead.
func (*ScriptPubKeyResult) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12}
}

func (x *ScriptPubKeyResult) GetAsm() string {
	if x != nil {
		return x.Asm
	}
	return ""
}

func (x *ScriptPubKeyResult) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

func (x *ScriptPubKeyResult) GetReqSigs() uint32 {
	if x != nil {
		return x.ReqSigs
	}
	return 0
}

func (x *ScriptPubKeyResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ScriptPubKeyResult) GetFrozenPeriod() uint32 {
	if x != nil {
		return x.FrozenPeriod
	}
	return 0
}

func (x *ScriptPubKeyResult) GetRewardAddress() string {
	if x != nil {
		return x.RewardAddress
	}
	return ""
}

func (x *ScriptPubKeyResult) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type Vout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value           string              `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	N               uint32              `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	ScriptPublicKey *ScriptPubKeyResult `protobuf:"bytes,3,opt,name=script_public_key,json=scriptPublicKey,proto3" json:"script_public_key,omitempty"`
}

func (x *Vout) Reset() {
	*x = Vout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vout) ProtoMessage() {}

func (x *Vout) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vout.ProtoReflect.Descriptor instead.
func (*Vout) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{13}
}

func (x *Vout) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Vout) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *Vout) GetScriptPublicKey() *ScriptPubKeyResult {
	if x != nil {
		return x.ScriptPublicKey
	}
	return nil
}

type TxRawResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid          string            `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Version       uint32            `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	LockTime      uint64            `protobuf:"varint,3,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	Block         *BlockInfoForTx   `protobuf:"bytes,4,opt,name=block,proto3" json:"block,omitempty"`
	Vin           []*Vin            `protobuf:"bytes,5,rep,name=vin,proto3" json:"vin,omitempty"`
	Vout          []*Vout           `protobuf:"bytes,6,rep,name=vout,proto3" json:"vout,omitempty"`
	FromAddress   []string          `protobuf:"bytes,7,rep,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	To            []*ToAddressForTx `protobuf:"bytes,8,rep,name=to,proto3" json:"to,omitempty"`
	Inputs        []*InputsInTx     `protobuf:"bytes,9,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Payload       string            `protobuf:"bytes,10,opt,name=payload,proto3" json:"payload,omitempty"`
	Confirmations uint64            `protobuf:"varint,11,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	Size          uint32            `protobuf:"varint,12,opt,name=size,proto3" json:"size,omitempty"`
	Fee           string            `protobuf:"bytes,13,opt,name=fee,proto3" json:"fee,omitempty"`
	Status        int32             `protobuf:"varint,14,opt,name=status,proto3" json:"status,omitempty"`
	Type          int32             `protobuf:"varint,15,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *TxRawResult) Reset() {
	*x = TxRawResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxRawResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxRawResult) ProtoMessage() {}

func (x *TxRawResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxRawResult.ProtoReflect.Descriptor instead.
func (*TxRawResult) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{14}
}

func (x *TxRawResult) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *TxRawResult) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TxRawResult) GetLockTime() uint64 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *TxRawResult) GetBlock() *BlockInfoForTx {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *TxRawResult) GetVin() []*Vin {
	if x != nil {
		return x.Vin
	}
	return nil
}

func (x *TxRawResult) GetVout() []*Vout {
	if x != nil {
		return x.Vout
	}
	return nil
}

func (x *TxRawResult) GetFromAddress() []string {
	if x != nil {
		return x.FromAddress
	}
	return nil
}

func (x *TxRawResult) GetTo() []*ToAddressForTx {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *TxRawResult) GetInputs() []*InputsInTx {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TxRawResult) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *TxRawResult) GetConfirmations() uint64 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *TxRawResult) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TxRawResult) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *TxRawResult) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TxRawResult) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash            string        `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	ChainId         string        `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Version         uint64        `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Height          uint64        `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Time            int64         `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	PreviousHash    string        `protobuf:"bytes,6,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	TransactionRoot string        `protobuf:"bytes,7,opt,name=transaction_root,json=transactionRoot,proto3" json:"transaction_root,omitempty"`
	WitnessRoot     string        `protobuf:"bytes,8,opt,name=witness_root,json=witnessRoot,proto3" json:"witness_root,omitempty"`
	ProposalRoot    string        `protobuf:"bytes,9,opt,name=proposal_root,json=proposalRoot,proto3" json:"proposal_root,omitempty"`
	Target          string        `protobuf:"bytes,10,opt,name=target,proto3" json:"target,omitempty"`
	Challenge       string        `protobuf:"bytes,11,opt,name=challenge,proto3" json:"challenge,omitempty"`
	PublicKey       string        `protobuf:"bytes,12,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Proof           *Proof        `protobuf:"bytes,13,opt,name=proof,proto3" json:"proof,omitempty"`
	BlockSignature  *PoCSignature `protobuf:"bytes,14,opt,name=block_signature,json=blockSignature,proto3" json:"block_signature,omitempty"`
	BanList         []string      `protobuf:"bytes,15,rep,name=ban_list,json=banList,proto3" json:"ban_list,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{15}
}

func (x *Header) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Header) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *Header) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Header) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Header) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Header) GetPreviousHash() string {
	if x != nil {
		return x.PreviousHash
	}
	return ""
}

func (x *Header) GetTransactionRoot() string {
	if x != nil {
		return x.TransactionRoot
	}
	return ""
}

func (x *Header) GetWitnessRoot() string {
	if x != nil {
		return x.WitnessRoot
	}
	return ""
}

func (x *Header) GetProposalRoot() string {
	if x != nil {
		return x.ProposalRoot
	}
	return ""
}

func (x *Header) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Header) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *Header) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *Header) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *Header) GetBlockSignature() *PoCSignature {
	if x != nil {
		return x.BlockSignature
	}
	return nil
}

func (x *Header) GetBanList() []string {
	if x != nil {
		return x.BanList
	}
	return nil
}

type FaultPubKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version      uint32    `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	ProposalType uint32    `protobuf:"varint,2,opt,name=proposal_type,json=proposalType,proto3" json:"proposal_type,omitempty"`
	PublicKey    string    `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Testimony    []*Header `protobuf:"bytes,4,rep,name=testimony,proto3" json:"testimony,omitempty"`
}

func (x *FaultPubKey) Reset() {
	*x = FaultPubKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaultPubKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaultPubKey) ProtoMessage() {}

func (x *FaultPubKey) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaultPubKey.ProtoReflect.Descriptor instead.
func (*FaultPubKey) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{16}
}

func (x *FaultPubKey) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FaultPubKey) GetProposalType() uint32 {
	if x != nil {
		return x.ProposalType
	}
	return 0
}

func (x *FaultPubKey) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *FaultPubKey) GetTestimony() []*Header {
	if x != nil {
		return x.Testimony
	}
	return nil
}

type NormalProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version      uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	ProposalType uint32 `protobuf:"varint,2,opt,name=proposal_type,json=proposalType,proto3" json:"proposal_type,omitempty"`
	Data         string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NormalProposal) Reset() {
	*x = NormalProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalProposal) ProtoMessage() {}

func (x *NormalProposal) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalProposal.ProtoReflect.Descriptor instead.
func (*NormalProposal) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{17}
}

func (x *NormalProposal) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *NormalProposal) GetProposalType() uint32 {
	if x != nil {
		return x.ProposalType
	}
	return 0
}

func (x *NormalProposal) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type ProposalArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PunishmentArea []*FaultPubKey    `protobuf:"bytes,1,rep,name=punishment_area,json=punishmentArea,proto3" json:"punishment_area,omitempty"`
	OtherArea      []*NormalProposal `protobuf:"bytes,2,rep,name=other_area,json=otherArea,proto3" json:"other_area,omitempty"`
}

func (x *ProposalArea) Reset() {
	*x = ProposalArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalArea) ProtoMessage() {}

func (x *ProposalArea) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalArea.ProtoReflect.Descriptor instead.
func (*ProposalArea) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{18}
}

func (x *ProposalArea) GetPunishmentArea() []*FaultPubKey {
	if x != nil {
		return x.PunishmentArea
	}
	return nil
}

func (x *ProposalArea) GetOtherArea() []*NormalProposal {
	if x != nil {
		return x.OtherArea
	}
	return nil
}

type GetBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash            string         `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	ChainId         string         `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Version         uint64         `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Height          uint64         `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Confirmations   uint64         `protobuf:"varint,5,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	Time            int64          `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
	PreviousHash    string         `protobuf:"bytes,7,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	NextHash        string         `protobuf:"bytes,8,opt,name=next_hash,json=nextHash,proto3" json:"next_hash,omitempty"`
	TransactionRoot string         `protobuf:"bytes,9,opt,name=transaction_root,json=transactionRoot,proto3" json:"transaction_root,omitempty"`
	WitnessRoot     string         `protobuf:"bytes,10,opt,name=witness_root,json=witnessRoot,proto3" json:"witness_root,omitempty"`
	ProposalRoot    string         `protobuf:"bytes,11,opt,name=proposal_root,json=proposalRoot,proto3" json:"proposal_root,omitempty"`
	Target          string         `protobuf:"bytes,12,opt,name=target,proto3" json:"target,omitempty"`
	Quality         string         `protobuf:"bytes,13,opt,name=quality,proto3" json:"quality,omitempty"`
	Challenge       string         `protobuf:"bytes,14,opt,name=challenge,proto3" json:"challenge,omitempty"`
	PublicKey       string         `protobuf:"bytes,15,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Proof           *Proof         `protobuf:"bytes,16,opt,name=proof,proto3" json:"proof,omitempty"`
	BlockSignature  *PoCSignature  `protobuf:"bytes,17,opt,name=block_signature,json=blockSignature,proto3" json:"block_signature,omitempty"`
	BanList         []string       `protobuf:"bytes,18,rep,name=ban_list,json=banList,proto3" json:"ban_list,omitempty"`
	ProposalArea    *ProposalArea  `protobuf:"bytes,19,opt,name=proposal_area,json=proposalArea,proto3" json:"proposal_area,omitempty"`
	Tx              []string       `protobuf:"bytes,20,rep,name=tx,proto3" json:"tx,omitempty"`
	RawTx           []*TxRawResult `protobuf:"bytes,21,rep,name=raw_tx,json=rawTx,proto3" json:"raw_tx,omitempty"`
	Size            uint32         `protobuf:"varint,22,opt,name=size,proto3" json:"size,omitempty"`
	TimeUtc         string         `protobuf:"bytes,23,opt,name=time_utc,json=timeUtc,proto3" json:"time_utc,omitempty"`
	TxCount         uint32         `protobuf:"varint,24,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
}

func (x *GetBlockResponse) Reset() {
	*x = GetBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockResponse) ProtoMessage() {}

func (x *GetBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockResponse.ProtoReflect.Descriptor instead.
func (*GetBlockResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{19}
}

func (x *GetBlockResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *GetBlockResponse) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *GetBlockResponse) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetBlockResponse) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetBlockResponse) GetConfirmations() uint64 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *GetBlockResponse) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GetBlockResponse) GetPreviousHash() string {
	if x != nil {
		return x.PreviousHash
	}
	return ""
}

func (x *GetBlockResponse) GetNextHash() string {
	if x != nil {
		return x.NextHash
	}
	return ""
}

func (x *GetBlockResponse) GetTransactionRoot() string {
	if x != nil {
		return x.TransactionRoot
	}
	return ""
}

func (x *GetBlockResponse) GetWitnessRoot() string {
	if x != nil {
		return x.WitnessRoot
	}
	return ""
}

func (x *GetBlockResponse) GetProposalRoot() string {
	if x != nil {
		return x.ProposalRoot
	}
	return ""
}

func (x *GetBlockResponse) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *GetBlockResponse) GetQuality() string {
	if x != nil {
		return x.Quality
	}
	return ""
}

func (x *GetBlockResponse) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *GetBlockResponse) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *GetBlockResponse) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *GetBlockResponse) GetBlockSignature() *PoCSignature {
	if x != nil {
		return x.BlockSignature
	}
	return nil
}

func (x *GetBlockResponse) GetBanList() []string {
	if x != nil {
		return x.BanList
	}
	return nil
}

func (x *GetBlockResponse) GetProposalArea() *ProposalArea {
	if x != nil {
		return x.ProposalArea
	}
	return nil
}

func (x *GetBlockResponse) GetTx() []string {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *GetBlockResponse) GetRawTx() []*TxRawResult {
	if x != nil {
		return x.RawTx
	}
	return nil
}

func (x *GetBlockResponse) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetBlockResponse) GetTimeUtc() string {
	if x != nil {
		return x.TimeUtc
	}
	return ""
}

func (x *GetBlockResponse) GetTxCount() uint32 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

type GetBlockHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetBlockHeaderRequest) Reset() {
	*x = GetBlockHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeaderRequest) ProtoMessage() {}

func (x *GetBlockHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeaderRequest.ProtoReflect.Descriptor instead.
func (*GetBlockHeaderRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{20}
}

func (x *GetBlockHeaderRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetBlockHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash            string        `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	ChainId         string        `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Version         uint64        `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Height          uint64        `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Confirmations   uint64        `protobuf:"varint,5,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	Timestamp       int64         `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PreviousHash    string        `protobuf:"bytes,7,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	NextHash        string        `protobuf:"bytes,8,opt,name=next_hash,json=nextHash,proto3" json:"next_hash,omitempty"`
	TransactionRoot string        `protobuf:"bytes,9,opt,name=transaction_root,json=transactionRoot,proto3" json:"transaction_root,omitempty"`
	WitnessRoot     string        `protobuf:"bytes,10,opt,name=witness_root,json=witnessRoot,proto3" json:"witness_root,omitempty"`
	ProposalRoot    string        `protobuf:"bytes,11,opt,name=proposal_root,json=proposalRoot,proto3" json:"proposal_root,omitempty"`
	Target          string        `protobuf:"bytes,12,opt,name=target,proto3" json:"target,omitempty"`
	Quality         string        `protobuf:"bytes,13,opt,name=quality,proto3" json:"quality,omitempty"`
	Challenge       string        `protobuf:"bytes,14,opt,name=challenge,proto3" json:"challenge,omitempty"`
	PublicKey       string        `protobuf:"bytes,15,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Proof           *Proof        `protobuf:"bytes,16,opt,name=proof,proto3" json:"proof,omitempty"`
	BlockSignature  *PoCSignature `protobuf:"bytes,17,opt,name=block_signature,json=blockSignature,proto3" json:"block_signature,omitempty"`
	BanList         []string      `protobuf:"bytes,18,rep,name=ban_list,json=banList,proto3" json:"ban_list,omitempty"`
	TimeUtc         string        `protobuf:"bytes,19,opt,name=time_utc,json=timeUtc,proto3" json:"time_utc,omitempty"`
}

func (x *GetBlockHeaderResponse) Reset() {
	*x = GetBlockHeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeaderResponse) ProtoMessage() {}

func (x *GetBlockHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeaderResponse.ProtoReflect.Descriptor instead.
func (*GetBlockHeaderResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{21}
}

func (x *GetBlockHeaderResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *GetBlockHeaderResponse) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *GetBlockHeaderResponse) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetBlockHeaderResponse) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetBlockHeaderResponse) GetConfirmations() uint64 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *GetBlockHeaderResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GetBlockHeaderResponse) GetPreviousHash() string {
	if x != nil {
		return x.PreviousHash
	}
	return ""
}

func (x *GetBlockHeaderResponse) GetNextHash() string {
	if x != nil {
		return x.NextHash
	}
	return ""
}

func (x *GetBlockHeaderResponse) GetTransactionRoot() string {
	if x != nil {
		return x.TransactionRoot
	}
	return ""
}

func (x *GetBlockHeaderResponse) GetWitnessRoot() string {
	if x != nil {
		return x.WitnessRoot
	}
	return ""
}

func (x *GetBlockHeaderResponse) GetProposalRoot() string {
	if x != nil {
		return x.ProposalRoot
	}
	return ""
}

func (x *GetBlockHeaderResponse) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *GetBlockHeaderResponse) GetQuality() string {
	if x != nil {
		return x.Quality
	}
	return ""
}

func (x *GetBlockHeaderResponse) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *GetBlockHeaderResponse) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *GetBlockHeaderResponse) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *GetBlockHeaderResponse) GetBlockSignature() *PoCSignature {
	if x != nil {
		return x.BlockSignature
	}
	return nil
}

func (x *GetBlockHeaderResponse) GetBanList() []string {
	if x != nil {
		return x.BanList
	}
	return nil
}

func (x *GetBlockHeaderResponse) GetTimeUtc() string {
	if x != nil {
		return x.TimeUtc
	}
	return ""
}

type GetBlockRequestV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBlockRequestV2) Reset() {
	*x = GetBlockRequestV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockRequestV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockRequestV2) ProtoMessage() {}

func (x *GetBlockRequestV2) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockRequestV2.ProtoReflect.Descriptor instead.
func (*GetBlockRequestV2) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{22}
}

func (x *GetBlockRequestV2) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetBlockResponseV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Previous        string        `protobuf:"bytes,1,opt,name=previous,proto3" json:"previous,omitempty"`
	Next            string        `protobuf:"bytes,2,opt,name=next,proto3" json:"next,omitempty"`
	Confirmations   uint64        `protobuf:"varint,3,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	PlainSize       uint32        `protobuf:"varint,4,opt,name=plain_size,json=plainSize,proto3" json:"plain_size,omitempty"`
	PacketSize      uint32        `protobuf:"varint,5,opt,name=packet_size,json=packetSize,proto3" json:"packet_size,omitempty"`
	Hash            string        `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	ChainId         string        `protobuf:"bytes,7,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Version         uint64        `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
	Height          uint64        `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp       int64         `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TimeUtc         string        `protobuf:"bytes,11,opt,name=time_utc,json=timeUtc,proto3" json:"time_utc,omitempty"`
	TransactionRoot string        `protobuf:"bytes,12,opt,name=transaction_root,json=transactionRoot,proto3" json:"transaction_root,omitempty"`
	WitnessRoot     string        `protobuf:"bytes,13,opt,name=witness_root,json=witnessRoot,proto3" json:"witness_root,omitempty"`
	ProposalRoot    string        `protobuf:"bytes,14,opt,name=proposal_root,json=proposalRoot,proto3" json:"proposal_root,omitempty"`
	Target          string        `protobuf:"bytes,15,opt,name=target,proto3" json:"target,omitempty"`
	Quality         string        `protobuf:"bytes,16,opt,name=quality,proto3" json:"quality,omitempty"`
	Challenge       string        `protobuf:"bytes,17,opt,name=challenge,proto3" json:"challenge,omitempty"`
	PublicKey       string        `protobuf:"bytes,18,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Proof           *Proof        `protobuf:"bytes,19,opt,name=proof,proto3" json:"proof,omitempty"`
	Signature       *PoCSignature `protobuf:"bytes,20,opt,name=signature,proto3" json:"signature,omitempty"`
	BanList         []string      `protobuf:"bytes,21,rep,name=ban_list,json=banList,proto3" json:"ban_list,omitempty"`
	Proposals       *ProposalArea `protobuf:"bytes,22,opt,name=proposals,proto3" json:"proposals,omitempty"`
	TxCount         uint32        `protobuf:"varint,23,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	Txids           []string      `protobuf:"bytes,24,rep,name=txids,proto3" json:"txids,omitempty"`
}

func (x *GetBlockResponseV2) Reset() {
	*x = GetBlockResponseV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockResponseV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockResponseV2) ProtoMessage() {}

func (x *GetBlockResponseV2) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockResponseV2.ProtoReflect.Descriptor instead.
func (*GetBlockResponseV2) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{23}
}

func (x *GetBlockResponseV2) GetPrevious() string {
	if x != nil {
		return x.Previous
	}
	return ""
}

func (x *GetBlockResponseV2) GetNext() string {
	if x != nil {
		return x.Next
	}
	return ""
}

func (x *GetBlockResponseV2) GetConfirmations() uint64 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *GetBlockResponseV2) GetPlainSize() uint32 {
	if x != nil {
		return x.PlainSize
	}
	return 0
}

func (x *GetBlockResponseV2) GetPacketSize() uint32 {
	if x != nil {
		return x.PacketSize
	}
	return 0
}

func (x *GetBlockResponseV2) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *GetBlockResponseV2) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *GetBlockResponseV2) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetBlockResponseV2) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetBlockResponseV2) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GetBlockResponseV2) GetTimeUtc() string {
	if x != nil {
		return x.TimeUtc
	}
	return ""
}

func (x *GetBlockResponseV2) GetTransactionRoot() string {
	if x != nil {
		return x.TransactionRoot
	}
	return ""
}

func (x *GetBlockResponseV2) GetWitnessRoot() string {
	if x != nil {
		return x.WitnessRoot
	}
	return ""
}

func (x *GetBlockResponseV2) GetProposalRoot() string {
	if x != nil {
		return x.ProposalRoot
	}
	return ""
}

func (x *GetBlockResponseV2) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *GetBlockResponseV2) GetQuality() string {
	if x != nil {
		return x.Quality
	}
	return ""
}

func (x *GetBlockResponseV2) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *GetBlockResponseV2) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *GetBlockResponseV2) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *GetBlockResponseV2) GetSignature() *PoCSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *GetBlockResponseV2) GetBanList() []string {
	if x != nil {
		return x.BanList
	}
	return nil
}

func (x *GetBlockResponseV2) GetProposals() *ProposalArea {
	if x != nil {
		return x.Proposals
	}
	return nil
}

func (x *GetBlockResponseV2) GetTxCount() uint32 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *GetBlockResponseV2) GetTxids() []string {
	if x != nil {
		return x.Txids
	}
	return nil
}

type TxOutPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid  string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Index uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *TxOutPoint) Reset() {
	*x = TxOutPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOutPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutPoint) ProtoMessage() {}

func (x *TxOutPoint) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutPoint.ProtoReflect.Descriptor instead.
func (*TxOutPoint) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{24}
}

func (x *TxOutPoint) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *TxOutPoint) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

//======= Transaction ==============
type GetRawTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *GetRawTransactionRequest) Reset() {
	*x = GetRawTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawTransactionRequest) ProtoMessage() {}

func (x *GetRawTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetRawTransactionRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{25}
}

func (x *GetRawTransactionRequest) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

type GetRawTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hex           string          `protobuf:"bytes,1,opt,name=hex,proto3" json:"hex,omitempty"`
	TxId          string          `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Version       int32           `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	LockTime      int64           `protobuf:"varint,4,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	Block         *BlockInfoForTx `protobuf:"bytes,5,opt,name=block,proto3" json:"block,omitempty"`
	Vin           []*Vin          `protobuf:"bytes,6,rep,name=vin,proto3" json:"vin,omitempty"`
	Vout          []*Vout         `protobuf:"bytes,7,rep,name=vout,proto3" json:"vout,omitempty"`
	Payload       string          `protobuf:"bytes,8,opt,name=payload,proto3" json:"payload,omitempty"`
	Confirmations uint64          `protobuf:"varint,9,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	Size          int32           `protobuf:"varint,10,opt,name=size,proto3" json:"size,omitempty"`
	Fee           string          `protobuf:"bytes,11,opt,name=fee,proto3" json:"fee,omitempty"`
	Status        int32           `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
	Coinbase      bool            `protobuf:"varint,13,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
}

func (x *GetRawTransactionResponse) Reset() {
	*x = GetRawTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawTransactionResponse) ProtoMessage() {}

func (x *GetRawTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawTransactionResponse.ProtoReflect.Descriptor instead.
func (*GetRawTransactionResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{26}
}

func (x *GetRawTransactionResponse) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

func (x *GetRawTransactionResponse) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *GetRawTransactionResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetRawTransactionResponse) GetLockTime() int64 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *GetRawTransactionResponse) GetBlock() *BlockInfoForTx {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *GetRawTransactionResponse) GetVin() []*Vin {
	if x != nil {
		return x.Vin
	}
	return nil
}

func (x *GetRawTransactionResponse) GetVout() []*Vout {
	if x != nil {
		return x.Vout
	}
	return nil
}

func (x *GetRawTransactionResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *GetRawTransactionResponse) GetConfirmations() uint64 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *GetRawTransactionResponse) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetRawTransactionResponse) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *GetRawTransactionResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetRawTransactionResponse) GetCoinbase() bool {
	if x != nil {
		return x.Coinbase
	}
	return false
}

type GetTxDescVerbose0Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid             string  `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	PlainSize        uint32  `protobuf:"varint,2,opt,name=plain_size,json=plainSize,proto3" json:"plain_size,omitempty"`
	PacketSize       uint32  `protobuf:"varint,3,opt,name=packet_size,json=packetSize,proto3" json:"packet_size,omitempty"`
	Time             int64   `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	Height           uint64  `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	Fee              string  `protobuf:"bytes,6,opt,name=fee,proto3" json:"fee,omitempty"`
	StartingPriority float64 `protobuf:"fixed64,7,opt,name=starting_priority,json=startingPriority,proto3" json:"starting_priority,omitempty"`
	TotalInputAge    int64   `protobuf:"varint,8,opt,name=total_input_age,json=totalInputAge,proto3" json:"total_input_age,omitempty"`
}

func (x *GetTxDescVerbose0Response) Reset() {
	*x = GetTxDescVerbose0Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxDescVerbose0Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxDescVerbose0Response) ProtoMessage() {}

func (x *GetTxDescVerbose0Response) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxDescVerbose0Response.ProtoReflect.Descriptor instead.
func (*GetTxDescVerbose0Response) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{27}
}

func (x *GetTxDescVerbose0Response) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *GetTxDescVerbose0Response) GetPlainSize() uint32 {
	if x != nil {
		return x.PlainSize
	}
	return 0
}

func (x *GetTxDescVerbose0Response) GetPacketSize() uint32 {
	if x != nil {
		return x.PacketSize
	}
	return 0
}

func (x *GetTxDescVerbose0Response) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GetTxDescVerbose0Response) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetTxDescVerbose0Response) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *GetTxDescVerbose0Response) GetStartingPriority() float64 {
	if x != nil {
		return x.StartingPriority
	}
	return 0
}

func (x *GetTxDescVerbose0Response) GetTotalInputAge() int64 {
	if x != nil {
		return x.TotalInputAge
	}
	return 0
}

type GetTxDescVerbose1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid             string        `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	PlainSize        uint32        `protobuf:"varint,2,opt,name=plain_size,json=plainSize,proto3" json:"plain_size,omitempty"`
	PacketSize       uint32        `protobuf:"varint,3,opt,name=packet_size,json=packetSize,proto3" json:"packet_size,omitempty"`
	Time             int64         `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	Height           uint64        `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	Fee              string        `protobuf:"bytes,6,opt,name=fee,proto3" json:"fee,omitempty"`
	StartingPriority float64       `protobuf:"fixed64,7,opt,name=starting_priority,json=startingPriority,proto3" json:"starting_priority,omitempty"`
	TotalInputAge    int64         `protobuf:"varint,8,opt,name=total_input_age,json=totalInputAge,proto3" json:"total_input_age,omitempty"`
	CurrentPriority  float64       `protobuf:"fixed64,9,opt,name=current_priority,json=currentPriority,proto3" json:"current_priority,omitempty"`
	Depends          []*TxOutPoint `protobuf:"bytes,10,rep,name=depends,proto3" json:"depends,omitempty"`
}

func (x *GetTxDescVerbose1Response) Reset() {
	*x = GetTxDescVerbose1Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxDescVerbose1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxDescVerbose1Response) ProtoMessage() {}

func (x *GetTxDescVerbose1Response) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxDescVerbose1Response.ProtoReflect.Descriptor instead.
func (*GetTxDescVerbose1Response) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{28}
}

func (x *GetTxDescVerbose1Response) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *GetTxDescVerbose1Response) GetPlainSize() uint32 {
	if x != nil {
		return x.PlainSize
	}
	return 0
}

func (x *GetTxDescVerbose1Response) GetPacketSize() uint32 {
	if x != nil {
		return x.PacketSize
	}
	return 0
}

func (x *GetTxDescVerbose1Response) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GetTxDescVerbose1Response) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetTxDescVerbose1Response) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *GetTxDescVerbose1Response) GetStartingPriority() float64 {
	if x != nil {
		return x.StartingPriority
	}
	return 0
}

func (x *GetTxDescVerbose1Response) GetTotalInputAge() int64 {
	if x != nil {
		return x.TotalInputAge
	}
	return 0
}

func (x *GetTxDescVerbose1Response) GetCurrentPriority() float64 {
	if x != nil {
		return x.CurrentPriority
	}
	return 0
}

func (x *GetTxDescVerbose1Response) GetDepends() []*TxOutPoint {
	if x != nil {
		return x.Depends
	}
	return nil
}

type GetOrphanTxDescResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid       string        `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	PlainSize  uint32        `protobuf:"varint,2,opt,name=plain_size,json=plainSize,proto3" json:"plain_size,omitempty"`
	PacketSize uint32        `protobuf:"varint,3,opt,name=packet_size,json=packetSize,proto3" json:"packet_size,omitempty"`
	Depends    []*TxOutPoint `protobuf:"bytes,4,rep,name=depends,proto3" json:"depends,omitempty"`
}

func (x *GetOrphanTxDescResponse) Reset() {
	*x = GetOrphanTxDescResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrphanTxDescResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrphanTxDescResponse) ProtoMessage() {}

func (x *GetOrphanTxDescResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrphanTxDescResponse.ProtoReflect.Descriptor instead.
func (*GetOrphanTxDescResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{29}
}

func (x *GetOrphanTxDescResponse) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *GetOrphanTxDescResponse) GetPlainSize() uint32 {
	if x != nil {
		return x.PlainSize
	}
	return 0
}

func (x *GetOrphanTxDescResponse) GetPacketSize() uint32 {
	if x != nil {
		return x.PacketSize
	}
	return 0
}

func (x *GetOrphanTxDescResponse) GetDepends() []*TxOutPoint {
	if x != nil {
		return x.Depends
	}
	return nil
}

type GetTxPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxCount          uint32   `protobuf:"varint,1,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	OrphanCount      uint32   `protobuf:"varint,2,opt,name=orphan_count,json=orphanCount,proto3" json:"orphan_count,omitempty"`
	TxPlainSize      uint64   `protobuf:"varint,3,opt,name=tx_plain_size,json=txPlainSize,proto3" json:"tx_plain_size,omitempty"`
	TxPacketSize     uint64   `protobuf:"varint,4,opt,name=tx_packet_size,json=txPacketSize,proto3" json:"tx_packet_size,omitempty"`
	OrphanPlainSize  uint64   `protobuf:"varint,5,opt,name=orphan_plain_size,json=orphanPlainSize,proto3" json:"orphan_plain_size,omitempty"`
	OrphanPacketSize uint64   `protobuf:"varint,6,opt,name=orphan_packet_size,json=orphanPacketSize,proto3" json:"orphan_packet_size,omitempty"`
	Txs              []string `protobuf:"bytes,7,rep,name=txs,proto3" json:"txs,omitempty"`
	Orphans          []string `protobuf:"bytes,8,rep,name=orphans,proto3" json:"orphans,omitempty"`
}

func (x *GetTxPoolResponse) Reset() {
	*x = GetTxPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxPoolResponse) ProtoMessage() {}

func (x *GetTxPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxPoolResponse.ProtoReflect.Descriptor instead.
func (*GetTxPoolResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{30}
}

func (x *GetTxPoolResponse) GetTxCount() uint32 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *GetTxPoolResponse) GetOrphanCount() uint32 {
	if x != nil {
		return x.OrphanCount
	}
	return 0
}

func (x *GetTxPoolResponse) GetTxPlainSize() uint64 {
	if x != nil {
		return x.TxPlainSize
	}
	return 0
}

func (x *GetTxPoolResponse) GetTxPacketSize() uint64 {
	if x != nil {
		return x.TxPacketSize
	}
	return 0
}

func (x *GetTxPoolResponse) GetOrphanPlainSize() uint64 {
	if x != nil {
		return x.OrphanPlainSize
	}
	return 0
}

func (x *GetTxPoolResponse) GetOrphanPacketSize() uint64 {
	if x != nil {
		return x.OrphanPacketSize
	}
	return 0
}

func (x *GetTxPoolResponse) GetTxs() []string {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *GetTxPoolResponse) GetOrphans() []string {
	if x != nil {
		return x.Orphans
	}
	return nil
}

type GetTxPoolVerbose0Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxCount          uint32                       `protobuf:"varint,1,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	OrphanCount      uint32                       `protobuf:"varint,2,opt,name=orphan_count,json=orphanCount,proto3" json:"orphan_count,omitempty"`
	TxPlainSize      uint64                       `protobuf:"varint,3,opt,name=tx_plain_size,json=txPlainSize,proto3" json:"tx_plain_size,omitempty"`
	TxPacketSize     uint64                       `protobuf:"varint,4,opt,name=tx_packet_size,json=txPacketSize,proto3" json:"tx_packet_size,omitempty"`
	OrphanPlainSize  uint64                       `protobuf:"varint,5,opt,name=orphan_plain_size,json=orphanPlainSize,proto3" json:"orphan_plain_size,omitempty"`
	OrphanPacketSize uint64                       `protobuf:"varint,6,opt,name=orphan_packet_size,json=orphanPacketSize,proto3" json:"orphan_packet_size,omitempty"`
	Txs              []string                     `protobuf:"bytes,7,rep,name=txs,proto3" json:"txs,omitempty"`
	Orphans          []string                     `protobuf:"bytes,8,rep,name=orphans,proto3" json:"orphans,omitempty"`
	TxDescs          []*GetTxDescVerbose0Response `protobuf:"bytes,9,rep,name=tx_descs,json=txDescs,proto3" json:"tx_descs,omitempty"`
	OrphanDescs      []*GetOrphanTxDescResponse   `protobuf:"bytes,10,rep,name=orphan_descs,json=orphanDescs,proto3" json:"orphan_descs,omitempty"`
}

func (x *GetTxPoolVerbose0Response) Reset() {
	*x = GetTxPoolVerbose0Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxPoolVerbose0Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxPoolVerbose0Response) ProtoMessage() {}

func (x *GetTxPoolVerbose0Response) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxPoolVerbose0Response.ProtoReflect.Descriptor instead.
func (*GetTxPoolVerbose0Response) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{31}
}

func (x *GetTxPoolVerbose0Response) GetTxCount() uint32 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *GetTxPoolVerbose0Response) GetOrphanCount() uint32 {
	if x != nil {
		return x.OrphanCount
	}
	return 0
}

func (x *GetTxPoolVerbose0Response) GetTxPlainSize() uint64 {
	if x != nil {
		return x.TxPlainSize
	}
	return 0
}

func (x *GetTxPoolVerbose0Response) GetTxPacketSize() uint64 {
	if x != nil {
		return x.TxPacketSize
	}
	return 0
}

func (x *GetTxPoolVerbose0Response) GetOrphanPlainSize() uint64 {
	if x != nil {
		return x.OrphanPlainSize
	}
	return 0
}

func (x *GetTxPoolVerbose0Response) GetOrphanPacketSize() uint64 {
	if x != nil {
		return x.OrphanPacketSize
	}
	return 0
}

func (x *GetTxPoolVerbose0Response) GetTxs() []string {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *GetTxPoolVerbose0Response) GetOrphans() []string {
	if x != nil {
		return x.Orphans
	}
	return nil
}

func (x *GetTxPoolVerbose0Response) GetTxDescs() []*GetTxDescVerbose0Response {
	if x != nil {
		return x.TxDescs
	}
	return nil
}

func (x *GetTxPoolVerbose0Response) GetOrphanDescs() []*GetOrphanTxDescResponse {
	if x != nil {
		return x.OrphanDescs
	}
	return nil
}

type GetTxPoolVerbose1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxCount          uint32                       `protobuf:"varint,1,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	OrphanCount      uint32                       `protobuf:"varint,2,opt,name=orphan_count,json=orphanCount,proto3" json:"orphan_count,omitempty"`
	TxPlainSize      uint64                       `protobuf:"varint,3,opt,name=tx_plain_size,json=txPlainSize,proto3" json:"tx_plain_size,omitempty"`
	TxPacketSize     uint64                       `protobuf:"varint,4,opt,name=tx_packet_size,json=txPacketSize,proto3" json:"tx_packet_size,omitempty"`
	OrphanPlainSize  uint64                       `protobuf:"varint,5,opt,name=orphan_plain_size,json=orphanPlainSize,proto3" json:"orphan_plain_size,omitempty"`
	OrphanPacketSize uint64                       `protobuf:"varint,6,opt,name=orphan_packet_size,json=orphanPacketSize,proto3" json:"orphan_packet_size,omitempty"`
	Txs              []string                     `protobuf:"bytes,7,rep,name=txs,proto3" json:"txs,omitempty"`
	Orphans          []string                     `protobuf:"bytes,8,rep,name=orphans,proto3" json:"orphans,omitempty"`
	TxDescs          []*GetTxDescVerbose1Response `protobuf:"bytes,9,rep,name=tx_descs,json=txDescs,proto3" json:"tx_descs,omitempty"`
	OrphanDescs      []*GetOrphanTxDescResponse   `protobuf:"bytes,10,rep,name=orphan_descs,json=orphanDescs,proto3" json:"orphan_descs,omitempty"`
}

func (x *GetTxPoolVerbose1Response) Reset() {
	*x = GetTxPoolVerbose1Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxPoolVerbose1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxPoolVerbose1Response) ProtoMessage() {}

func (x *GetTxPoolVerbose1Response) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxPoolVerbose1Response.ProtoReflect.Descriptor instead.
func (*GetTxPoolVerbose1Response) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{32}
}

func (x *GetTxPoolVerbose1Response) GetTxCount() uint32 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *GetTxPoolVerbose1Response) GetOrphanCount() uint32 {
	if x != nil {
		return x.OrphanCount
	}
	return 0
}

func (x *GetTxPoolVerbose1Response) GetTxPlainSize() uint64 {
	if x != nil {
		return x.TxPlainSize
	}
	return 0
}

func (x *GetTxPoolVerbose1Response) GetTxPacketSize() uint64 {
	if x != nil {
		return x.TxPacketSize
	}
	return 0
}

func (x *GetTxPoolVerbose1Response) GetOrphanPlainSize() uint64 {
	if x != nil {
		return x.OrphanPlainSize
	}
	return 0
}

func (x *GetTxPoolVerbose1Response) GetOrphanPacketSize() uint64 {
	if x != nil {
		return x.OrphanPacketSize
	}
	return 0
}

func (x *GetTxPoolVerbose1Response) GetTxs() []string {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *GetTxPoolVerbose1Response) GetOrphans() []string {
	if x != nil {
		return x.Orphans
	}
	return nil
}

func (x *GetTxPoolVerbose1Response) GetTxDescs() []*GetTxDescVerbose1Response {
	if x != nil {
		return x.TxDescs
	}
	return nil
}

func (x *GetTxPoolVerbose1Response) GetOrphanDescs() []*GetOrphanTxDescResponse {
	if x != nil {
		return x.OrphanDescs
	}
	return nil
}

type GetStakingTxPoolInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total           uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	MaturityValue   uint64 `protobuf:"varint,2,opt,name=maturity_value,json=maturityValue,proto3" json:"maturity_value,omitempty"`
	ImmaturityValue uint64 `protobuf:"varint,3,opt,name=immaturity_value,json=immaturityValue,proto3" json:"immaturity_value,omitempty"`
	AwardValue      uint64 `protobuf:"varint,4,opt,name=award_value,json=awardValue,proto3" json:"award_value,omitempty"`
	Height          uint64 `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	BlockHash       string `protobuf:"bytes,6,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Timestamp       uint64 `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetStakingTxPoolInfoResponse) Reset() {
	*x = GetStakingTxPoolInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStakingTxPoolInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStakingTxPoolInfoResponse) ProtoMessage() {}

func (x *GetStakingTxPoolInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStakingTxPoolInfoResponse.ProtoReflect.Descriptor instead.
func (*GetStakingTxPoolInfoResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{33}
}

func (x *GetStakingTxPoolInfoResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetStakingTxPoolInfoResponse) GetMaturityValue() uint64 {
	if x != nil {
		return x.MaturityValue
	}
	return 0
}

func (x *GetStakingTxPoolInfoResponse) GetImmaturityValue() uint64 {
	if x != nil {
		return x.ImmaturityValue
	}
	return 0
}

func (x *GetStakingTxPoolInfoResponse) GetAwardValue() uint64 {
	if x != nil {
		return x.AwardValue
	}
	return 0
}

func (x *GetStakingTxPoolInfoResponse) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetStakingTxPoolInfoResponse) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *GetStakingTxPoolInfoResponse) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type GetStakingTxPoolAwardRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetStakingTxPoolAwardRecordRequest) Reset() {
	*x = GetStakingTxPoolAwardRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStakingTxPoolAwardRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStakingTxPoolAwardRecordRequest) ProtoMessage() {}

func (x *GetStakingTxPoolAwardRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStakingTxPoolAwardRecordRequest.ProtoReflect.Descriptor instead.
func (*GetStakingTxPoolAwardRecordRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{34}
}

func (x *GetStakingTxPoolAwardRecordRequest) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type StakingTxPoolAwardRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId        string       `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	AwardedTime uint64       `protobuf:"varint,2,opt,name=awarded_time,json=awardedTime,proto3" json:"awarded_time,omitempty"`
	Tx          *TxRawResult `protobuf:"bytes,3,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *StakingTxPoolAwardRecord) Reset() {
	*x = StakingTxPoolAwardRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingTxPoolAwardRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingTxPoolAwardRecord) ProtoMessage() {}

func (x *StakingTxPoolAwardRecord) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingTxPoolAwardRecord.ProtoReflect.Descriptor instead.
func (*StakingTxPoolAwardRecord) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{35}
}

func (x *StakingTxPoolAwardRecord) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *StakingTxPoolAwardRecord) GetAwardedTime() uint64 {
	if x != nil {
		return x.AwardedTime
	}
	return 0
}

func (x *StakingTxPoolAwardRecord) GetTx() *TxRawResult {
	if x != nil {
		return x.Tx
	}
	return nil
}

type GetStakingTxPoolAwardRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*StakingTxPoolAwardRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *GetStakingTxPoolAwardRecordResponse) Reset() {
	*x = GetStakingTxPoolAwardRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStakingTxPoolAwardRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStakingTxPoolAwardRecordResponse) ProtoMessage() {}

func (x *GetStakingTxPoolAwardRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStakingTxPoolAwardRecordResponse.ProtoReflect.Descriptor instead.
func (*GetStakingTxPoolAwardRecordResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{36}
}

func (x *GetStakingTxPoolAwardRecordResponse) GetRecords() []*StakingTxPoolAwardRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type ConfigureSpaceKeeperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capacity        uint64   `protobuf:"varint,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
	PayoutAddresses []string `protobuf:"bytes,2,rep,name=payout_addresses,json=payoutAddresses,proto3" json:"payout_addresses,omitempty"`
	Passphrase      string   `protobuf:"bytes,3,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (x *ConfigureSpaceKeeperRequest) Reset() {
	*x = ConfigureSpaceKeeperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureSpaceKeeperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureSpaceKeeperRequest) ProtoMessage() {}

func (x *ConfigureSpaceKeeperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureSpaceKeeperRequest.ProtoReflect.Descriptor instead.
func (*ConfigureSpaceKeeperRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{37}
}

func (x *ConfigureSpaceKeeperRequest) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *ConfigureSpaceKeeperRequest) GetPayoutAddresses() []string {
	if x != nil {
		return x.PayoutAddresses
	}
	return nil
}

func (x *ConfigureSpaceKeeperRequest) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

type WorkSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ordinal   int64   `protobuf:"varint,1,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	PublicKey string  `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Address   string  `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	BitLength uint32  `protobuf:"varint,4,opt,name=bit_length,json=bitLength,proto3" json:"bit_length,omitempty"`
	State     string  `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Progress  float64 `protobuf:"fixed64,6,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *WorkSpace) Reset() {
	*x = WorkSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkSpace) ProtoMessage() {}

func (x *WorkSpace) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkSpace.ProtoReflect.Descriptor instead.
func (*WorkSpace) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{38}
}

func (x *WorkSpace) GetOrdinal() int64 {
	if x != nil {
		return x.Ordinal
	}
	return 0
}

func (x *WorkSpace) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *WorkSpace) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *WorkSpace) GetBitLength() uint32 {
	if x != nil {
		return x.BitLength
	}
	return 0
}

func (x *WorkSpace) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *WorkSpace) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type WorkSpaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
}

func (x *WorkSpaceRequest) Reset() {
	*x = WorkSpaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkSpaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkSpaceRequest) ProtoMessage() {}

func (x *WorkSpaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkSpaceRequest.ProtoReflect.Descriptor instead.
func (*WorkSpaceRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{39}
}

func (x *WorkSpaceRequest) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

type WorkSpaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Space        *WorkSpace `protobuf:"bytes,1,opt,name=space,proto3" json:"space,omitempty"`
	ErrorCode    uint32     `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string     `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *WorkSpaceResponse) Reset() {
	*x = WorkSpaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkSpaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkSpaceResponse) ProtoMessage() {}

func (x *WorkSpaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkSpaceResponse.ProtoReflect.Descriptor instead.
func (*WorkSpaceResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{40}
}

func (x *WorkSpaceResponse) GetSpace() *WorkSpace {
	if x != nil {
		return x.Space
	}
	return nil
}

func (x *WorkSpaceResponse) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *WorkSpaceResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type WorkSpacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceCount   uint32       `protobuf:"varint,1,opt,name=space_count,json=spaceCount,proto3" json:"space_count,omitempty"`
	Spaces       []*WorkSpace `protobuf:"bytes,2,rep,name=spaces,proto3" json:"spaces,omitempty"`
	ErrorCode    uint32       `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string       `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *WorkSpacesResponse) Reset() {
	*x = WorkSpacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkSpacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkSpacesResponse) ProtoMessage() {}

func (x *WorkSpacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkSpacesResponse.ProtoReflect.Descriptor instead.
func (*WorkSpacesResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{41}
}

func (x *WorkSpacesResponse) GetSpaceCount() uint32 {
	if x != nil {
		return x.SpaceCount
	}
	return 0
}

func (x *WorkSpacesResponse) GetSpaces() []*WorkSpace {
	if x != nil {
		return x.Spaces
	}
	return nil
}

func (x *WorkSpacesResponse) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *WorkSpacesResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type ActOnSpaceKeeperResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ActOnSpaceKeeperResponse) Reset() {
	*x = ActOnSpaceKeeperResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActOnSpaceKeeperResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActOnSpaceKeeperResponse) ProtoMessage() {}

func (x *ActOnSpaceKeeperResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActOnSpaceKeeperResponse.ProtoReflect.Descriptor instead.
func (*ActOnSpaceKeeperResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{42}
}

func (x *ActOnSpaceKeeperResponse) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ActOnSpaceKeeperResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type ConfigureSpaceKeeperByDirsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allocations     []*ConfigureSpaceKeeperByDirsRequest_Allocation `protobuf:"bytes,1,rep,name=allocations,proto3" json:"allocations,omitempty"`
	PayoutAddresses []string                                        `protobuf:"bytes,2,rep,name=payout_addresses,json=payoutAddresses,proto3" json:"payout_addresses,omitempty"`
	Passphrase      string                                          `protobuf:"bytes,3,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (x *ConfigureSpaceKeeperByDirsRequest) Reset() {
	*x = ConfigureSpaceKeeperByDirsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureSpaceKeeperByDirsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureSpaceKeeperByDirsRequest) ProtoMessage() {}

func (x *ConfigureSpaceKeeperByDirsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureSpaceKeeperByDirsRequest.ProtoReflect.Descriptor instead.
func (*ConfigureSpaceKeeperByDirsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{43}
}

func (x *ConfigureSpaceKeeperByDirsRequest) GetAllocations() []*ConfigureSpaceKeeperByDirsRequest_Allocation {
	if x != nil {
		return x.Allocations
	}
	return nil
}

func (x *ConfigureSpaceKeeperByDirsRequest) GetPayoutAddresses() []string {
	if x != nil {
		return x.PayoutAddresses
	}
	return nil
}

func (x *ConfigureSpaceKeeperByDirsRequest) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

type WorkSpacesByDirsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectoryCount uint32                                 `protobuf:"varint,1,opt,name=directory_count,json=directoryCount,proto3" json:"directory_count,omitempty"`
	Allocations    []*WorkSpacesByDirsResponse_Allocation `protobuf:"bytes,2,rep,name=allocations,proto3" json:"allocations,omitempty"`
	ErrorCode      uint32                                 `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage   string                                 `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *WorkSpacesByDirsResponse) Reset() {
	*x = WorkSpacesByDirsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkSpacesByDirsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkSpacesByDirsResponse) ProtoMessage() {}

func (x *WorkSpacesByDirsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkSpacesByDirsResponse.ProtoReflect.Descriptor instead.
func (*WorkSpacesByDirsResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{44}
}

func (x *WorkSpacesByDirsResponse) GetDirectoryCount() uint32 {
	if x != nil {
		return x.DirectoryCount
	}
	return 0
}

func (x *WorkSpacesByDirsResponse) GetAllocations() []*WorkSpacesByDirsResponse_Allocation {
	if x != nil {
		return x.Allocations
	}
	return nil
}

func (x *WorkSpacesByDirsResponse) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *WorkSpacesByDirsResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type GetClientStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version         string                                `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	PeerListening   bool                                  `protobuf:"varint,2,opt,name=peer_listening,json=peerListening,proto3" json:"peer_listening,omitempty"`
	Syncing         bool                                  `protobuf:"varint,3,opt,name=syncing,proto3" json:"syncing,omitempty"`
	Mining          bool                                  `protobuf:"varint,4,opt,name=mining,proto3" json:"mining,omitempty"`
	SpaceKeeping    bool                                  `protobuf:"varint,5,opt,name=space_keeping,json=spaceKeeping,proto3" json:"space_keeping,omitempty"`
	ChainId         string                                `protobuf:"bytes,6,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	LocalBestHeight uint64                                `protobuf:"varint,7,opt,name=local_best_height,json=localBestHeight,proto3" json:"local_best_height,omitempty"`
	KnownBestHeight uint64                                `protobuf:"varint,8,opt,name=known_best_height,json=knownBestHeight,proto3" json:"known_best_height,omitempty"`
	P2PId           string                                `protobuf:"bytes,9,opt,name=p2p_id,json=p2pId,proto3" json:"p2p_id,omitempty"`
	PeerCount       *GetClientStatusResponsePeerCountInfo `protobuf:"bytes,10,opt,name=peer_count,json=peerCount,proto3" json:"peer_count,omitempty"`
	Peers           *GetClientStatusResponsePeerList      `protobuf:"bytes,11,opt,name=peers,proto3" json:"peers,omitempty"`
}

func (x *GetClientStatusResponse) Reset() {
	*x = GetClientStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClientStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientStatusResponse) ProtoMessage() {}

func (x *GetClientStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientStatusResponse.ProtoReflect.Descriptor instead.
func (*GetClientStatusResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{45}
}

func (x *GetClientStatusResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetClientStatusResponse) GetPeerListening() bool {
	if x != nil {
		return x.PeerListening
	}
	return false
}

func (x *GetClientStatusResponse) GetSyncing() bool {
	if x != nil {
		return x.Syncing
	}
	return false
}

func (x *GetClientStatusResponse) GetMining() bool {
	if x != nil {
		return x.Mining
	}
	return false
}

func (x *GetClientStatusResponse) GetSpaceKeeping() bool {
	if x != nil {
		return x.SpaceKeeping
	}
	return false
}

func (x *GetClientStatusResponse) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *GetClientStatusResponse) GetLocalBestHeight() uint64 {
	if x != nil {
		return x.LocalBestHeight
	}
	return 0
}

func (x *GetClientStatusResponse) GetKnownBestHeight() uint64 {
	if x != nil {
		return x.KnownBestHeight
	}
	return 0
}

func (x *GetClientStatusResponse) GetP2PId() string {
	if x != nil {
		return x.P2PId
	}
	return ""
}

func (x *GetClientStatusResponse) GetPeerCount() *GetClientStatusResponsePeerCountInfo {
	if x != nil {
		return x.PeerCount
	}
	return nil
}

func (x *GetClientStatusResponse) GetPeers() *GetClientStatusResponsePeerList {
	if x != nil {
		return x.Peers
	}
	return nil
}

type QuitClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Msg       string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *QuitClientResponse) Reset() {
	*x = QuitClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuitClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuitClientResponse) ProtoMessage() {}

func (x *QuitClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuitClientResponse.ProtoReflect.Descriptor instead.
func (*QuitClientResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{46}
}

func (x *QuitClientResponse) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *QuitClientResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetBlockHeightByPubKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *GetBlockHeightByPubKeyRequest) Reset() {
	*x = GetBlockHeightByPubKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockHeightByPubKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeightByPubKeyRequest) ProtoMessage() {}

func (x *GetBlockHeightByPubKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeightByPubKeyRequest.ProtoReflect.Descriptor instead.
func (*GetBlockHeightByPubKeyRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{47}
}

func (x *GetBlockHeightByPubKeyRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

type GetBlockHeightByPubKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Heights []uint64 `protobuf:"varint,1,rep,packed,name=heights,proto3" json:"heights,omitempty"`
}

func (x *GetBlockHeightByPubKeyResponse) Reset() {
	*x = GetBlockHeightByPubKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockHeightByPubKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeightByPubKeyResponse) ProtoMessage() {}

func (x *GetBlockHeightByPubKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeightByPubKeyResponse.ProtoReflect.Descriptor instead.
func (*GetBlockHeightByPubKeyResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{48}
}

func (x *GetBlockHeightByPubKeyResponse) GetHeights() []uint64 {
	if x != nil {
		return x.Heights
	}
	return nil
}

type GetCoinbaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GetCoinbaseRequest) Reset() {
	*x = GetCoinbaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinbaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinbaseRequest) ProtoMessage() {}

func (x *GetCoinbaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinbaseRequest.ProtoReflect.Descriptor instead.
func (*GetCoinbaseRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{49}
}

func (x *GetCoinbaseRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type CoinbaseVout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value           string              `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	N               uint32              `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	ScriptPublicKey *ScriptPubKeyResult `protobuf:"bytes,3,opt,name=script_public_key,json=scriptPublicKey,proto3" json:"script_public_key,omitempty"`
	Type            string              `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CoinbaseVout) Reset() {
	*x = CoinbaseVout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinbaseVout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinbaseVout) ProtoMessage() {}

func (x *CoinbaseVout) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinbaseVout.ProtoReflect.Descriptor instead.
func (*CoinbaseVout) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{50}
}

func (x *CoinbaseVout) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CoinbaseVout) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *CoinbaseVout) GetScriptPublicKey() *ScriptPubKeyResult {
	if x != nil {
		return x.ScriptPublicKey
	}
	return nil
}

func (x *CoinbaseVout) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GetCoinbaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid          string          `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Version       uint32          `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	LockTime      uint64          `protobuf:"varint,3,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	Block         *BlockInfoForTx `protobuf:"bytes,4,opt,name=block,proto3" json:"block,omitempty"`
	BindingValue  string          `protobuf:"bytes,5,opt,name=binding_value,json=bindingValue,proto3" json:"binding_value,omitempty"`
	Vin           []*Vin          `protobuf:"bytes,6,rep,name=vin,proto3" json:"vin,omitempty"`
	Vout          []*CoinbaseVout `protobuf:"bytes,7,rep,name=vout,proto3" json:"vout,omitempty"`
	Payload       string          `protobuf:"bytes,8,opt,name=payload,proto3" json:"payload,omitempty"`
	Confirmations uint64          `protobuf:"varint,9,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	Size          uint32          `protobuf:"varint,10,opt,name=size,proto3" json:"size,omitempty"`
	TotalFees     string          `protobuf:"bytes,11,opt,name=total_fees,json=totalFees,proto3" json:"total_fees,omitempty"`
	Status        int32           `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetCoinbaseResponse) Reset() {
	*x = GetCoinbaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinbaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinbaseResponse) ProtoMessage() {}

func (x *GetCoinbaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinbaseResponse.ProtoReflect.Descriptor instead.
func (*GetCoinbaseResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{51}
}

func (x *GetCoinbaseResponse) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *GetCoinbaseResponse) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetCoinbaseResponse) GetLockTime() uint64 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *GetCoinbaseResponse) GetBlock() *BlockInfoForTx {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *GetCoinbaseResponse) GetBindingValue() string {
	if x != nil {
		return x.BindingValue
	}
	return ""
}

func (x *GetCoinbaseResponse) GetVin() []*Vin {
	if x != nil {
		return x.Vin
	}
	return nil
}

func (x *GetCoinbaseResponse) GetVout() []*CoinbaseVout {
	if x != nil {
		return x.Vout
	}
	return nil
}

func (x *GetCoinbaseResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *GetCoinbaseResponse) GetConfirmations() uint64 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *GetCoinbaseResponse) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetCoinbaseResponse) GetTotalFees() string {
	if x != nil {
		return x.TotalFees
	}
	return ""
}

func (x *GetCoinbaseResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ExportKeystoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId   string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Passphrase string `protobuf:"bytes,2,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	ExportPath string `protobuf:"bytes,3,opt,name=export_path,json=exportPath,proto3" json:"export_path,omitempty"`
}

func (x *ExportKeystoreRequest) Reset() {
	*x = ExportKeystoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportKeystoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportKeystoreRequest) ProtoMessage() {}

func (x *ExportKeystoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportKeystoreRequest.ProtoReflect.Descriptor instead.
func (*ExportKeystoreRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{52}
}

func (x *ExportKeystoreRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ExportKeystoreRequest) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

func (x *ExportKeystoreRequest) GetExportPath() string {
	if x != nil {
		return x.ExportPath
	}
	return ""
}

type ExportKeystoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keystore string `protobuf:"bytes,1,opt,name=keystore,proto3" json:"keystore,omitempty"`
}

func (x *ExportKeystoreResponse) Reset() {
	*x = ExportKeystoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportKeystoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportKeystoreResponse) ProtoMessage() {}

func (x *ExportKeystoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportKeystoreResponse.ProtoReflect.Descriptor instead.
func (*ExportKeystoreResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{53}
}

func (x *ExportKeystoreResponse) GetKeystore() string {
	if x != nil {
		return x.Keystore
	}
	return ""
}

type ImportKeystoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImportPath    string `protobuf:"bytes,1,opt,name=import_path,json=importPath,proto3" json:"import_path,omitempty"`
	OldPassphrase string `protobuf:"bytes,2,opt,name=old_passphrase,json=oldPassphrase,proto3" json:"old_passphrase,omitempty"`
	NewPassphrase string `protobuf:"bytes,3,opt,name=new_passphrase,json=newPassphrase,proto3" json:"new_passphrase,omitempty"`
}

func (x *ImportKeystoreRequest) Reset() {
	*x = ImportKeystoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportKeystoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportKeystoreRequest) ProtoMessage() {}

func (x *ImportKeystoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportKeystoreRequest.ProtoReflect.Descriptor instead.
func (*ImportKeystoreRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{54}
}

func (x *ImportKeystoreRequest) GetImportPath() string {
	if x != nil {
		return x.ImportPath
	}
	return ""
}

func (x *ImportKeystoreRequest) GetOldPassphrase() string {
	if x != nil {
		return x.OldPassphrase
	}
	return ""
}

func (x *ImportKeystoreRequest) GetNewPassphrase() string {
	if x != nil {
		return x.NewPassphrase
	}
	return ""
}

type ImportKeystoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Remark   string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *ImportKeystoreResponse) Reset() {
	*x = ImportKeystoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportKeystoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportKeystoreResponse) ProtoMessage() {}

func (x *ImportKeystoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportKeystoreResponse.ProtoReflect.Descriptor instead.
func (*ImportKeystoreResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{55}
}

func (x *ImportKeystoreResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *ImportKeystoreResponse) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ImportKeystoreResponse) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type WalletSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Remark   string `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark,omitempty"` // optional
}

func (x *WalletSummary) Reset() {
	*x = WalletSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletSummary) ProtoMessage() {}

func (x *WalletSummary) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletSummary.ProtoReflect.Descriptor instead.
func (*WalletSummary) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{56}
}

func (x *WalletSummary) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *WalletSummary) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type GetKeystoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallets []*WalletSummary `protobuf:"bytes,1,rep,name=wallets,proto3" json:"wallets,omitempty"`
}

func (x *GetKeystoreResponse) Reset() {
	*x = GetKeystoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeystoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeystoreResponse) ProtoMessage() {}

func (x *GetKeystoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeystoreResponse.ProtoReflect.Descriptor instead.
func (*GetKeystoreResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{57}
}

func (x *GetKeystoreResponse) GetWallets() []*WalletSummary {
	if x != nil {
		return x.Wallets
	}
	return nil
}

type UnlockWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passphrase string `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (x *UnlockWalletRequest) Reset() {
	*x = UnlockWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockWalletRequest) ProtoMessage() {}

func (x *UnlockWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockWalletRequest.ProtoReflect.Descriptor instead.
func (*UnlockWalletRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{58}
}

func (x *UnlockWalletRequest) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

type UnlockWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UnlockWalletResponse) Reset() {
	*x = UnlockWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockWalletResponse) ProtoMessage() {}

func (x *UnlockWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockWalletResponse.ProtoReflect.Descriptor instead.
func (*UnlockWalletResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{59}
}

func (x *UnlockWalletResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UnlockWalletResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type LockWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *LockWalletResponse) Reset() {
	*x = LockWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockWalletResponse) ProtoMessage() {}

func (x *LockWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockWalletResponse.ProtoReflect.Descriptor instead.
func (*LockWalletResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{60}
}

func (x *LockWalletResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *LockWalletResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ChangePrivatePassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldPrivpass string `protobuf:"bytes,1,opt,name=old_privpass,json=oldPrivpass,proto3" json:"old_privpass,omitempty"`
	NewPrivpass string `protobuf:"bytes,2,opt,name=new_privpass,json=newPrivpass,proto3" json:"new_privpass,omitempty"`
}

func (x *ChangePrivatePassRequest) Reset() {
	*x = ChangePrivatePassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePrivatePassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePrivatePassRequest) ProtoMessage() {}

func (x *ChangePrivatePassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePrivatePassRequest.ProtoReflect.Descriptor instead.
func (*ChangePrivatePassRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{61}
}

func (x *ChangePrivatePassRequest) GetOldPrivpass() string {
	if x != nil {
		return x.OldPrivpass
	}
	return ""
}

func (x *ChangePrivatePassRequest) GetNewPrivpass() string {
	if x != nil {
		return x.NewPrivpass
	}
	return ""
}

type ChangePrivatePassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ChangePrivatePassResponse) Reset() {
	*x = ChangePrivatePassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePrivatePassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePrivatePassResponse) ProtoMessage() {}

func (x *ChangePrivatePassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePrivatePassResponse.ProtoReflect.Descriptor instead.
func (*ChangePrivatePassResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{62}
}

func (x *ChangePrivatePassResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ChangePublicPassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldPubpass string `protobuf:"bytes,1,opt,name=old_pubpass,json=oldPubpass,proto3" json:"old_pubpass,omitempty"`
	NewPubpass string `protobuf:"bytes,2,opt,name=new_pubpass,json=newPubpass,proto3" json:"new_pubpass,omitempty"`
}

func (x *ChangePublicPassRequest) Reset() {
	*x = ChangePublicPassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePublicPassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePublicPassRequest) ProtoMessage() {}

func (x *ChangePublicPassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePublicPassRequest.ProtoReflect.Descriptor instead.
func (*ChangePublicPassRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{63}
}

func (x *ChangePublicPassRequest) GetOldPubpass() string {
	if x != nil {
		return x.OldPubpass
	}
	return ""
}

func (x *ChangePublicPassRequest) GetNewPubpass() string {
	if x != nil {
		return x.NewPubpass
	}
	return ""
}

type ChangePublicPassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ChangePublicPassResponse) Reset() {
	*x = ChangePublicPassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePublicPassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePublicPassResponse) ProtoMessage() {}

func (x *ChangePublicPassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePublicPassResponse.ProtoReflect.Descriptor instead.
func (*ChangePublicPassResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{64}
}

func (x *ChangePublicPassResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetGovernanceConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigType int32 `protobuf:"varint,1,opt,name=config_type,json=configType,proto3" json:"config_type,omitempty"`
}

func (x *GetGovernanceConfigRequest) Reset() {
	*x = GetGovernanceConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGovernanceConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGovernanceConfigRequest) ProtoMessage() {}

func (x *GetGovernanceConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGovernanceConfigRequest.ProtoReflect.Descriptor instead.
func (*GetGovernanceConfigRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{65}
}

func (x *GetGovernanceConfigRequest) GetConfigType() int32 {
	if x != nil {
		return x.ConfigType
	}
	return 0
}

type GovernanceSenateNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Equities uint64 `protobuf:"varint,2,opt,name=equities,proto3" json:"equities,omitempty"`
}

func (x *GovernanceSenateNode) Reset() {
	*x = GovernanceSenateNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernanceSenateNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernanceSenateNode) ProtoMessage() {}

func (x *GovernanceSenateNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernanceSenateNode.ProtoReflect.Descriptor instead.
func (*GovernanceSenateNode) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{66}
}

func (x *GovernanceSenateNode) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GovernanceSenateNode) GetEquities() uint64 {
	if x != nil {
		return x.Equities
	}
	return 0
}

type GovernanceSenateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*GovernanceSenateNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *GovernanceSenateConfig) Reset() {
	*x = GovernanceSenateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernanceSenateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernanceSenateConfig) ProtoMessage() {}

func (x *GovernanceSenateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernanceSenateConfig.ProtoReflect.Descriptor instead.
func (*GovernanceSenateConfig) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{67}
}

func (x *GovernanceSenateConfig) GetNodes() []*GovernanceSenateNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type GetGovernanceConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid       string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Height     uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	ConfigType int32  `protobuf:"varint,3,opt,name=config_type,json=configType,proto3" json:"config_type,omitempty"`
	// Types that are assignable to Config:
	//	*GetGovernanceConfigResponse_SenateNodesConfig
	Config isGetGovernanceConfigResponse_Config `protobuf_oneof:"config"`
}

func (x *GetGovernanceConfigResponse) Reset() {
	*x = GetGovernanceConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGovernanceConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGovernanceConfigResponse) ProtoMessage() {}

func (x *GetGovernanceConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGovernanceConfigResponse.ProtoReflect.Descriptor instead.
func (*GetGovernanceConfigResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{68}
}

func (x *GetGovernanceConfigResponse) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *GetGovernanceConfigResponse) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetGovernanceConfigResponse) GetConfigType() int32 {
	if x != nil {
		return x.ConfigType
	}
	return 0
}

func (m *GetGovernanceConfigResponse) GetConfig() isGetGovernanceConfigResponse_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *GetGovernanceConfigResponse) GetSenateNodesConfig() *GovernanceSenateConfig {
	if x, ok := x.GetConfig().(*GetGovernanceConfigResponse_SenateNodesConfig); ok {
		return x.SenateNodesConfig
	}
	return nil
}

type isGetGovernanceConfigResponse_Config interface {
	isGetGovernanceConfigResponse_Config()
}

type GetGovernanceConfigResponse_SenateNodesConfig struct {
	SenateNodesConfig *GovernanceSenateConfig `protobuf:"bytes,4,opt,name=senate_nodes_config,json=senateNodesConfig,proto3,oneof"`
}

func (*GetGovernanceConfigResponse_SenateNodesConfig) isGetGovernanceConfigResponse_Config() {}

type ConfigureSpaceKeeperByDirsRequest_Allocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Directory string `protobuf:"bytes,1,opt,name=directory,proto3" json:"directory,omitempty"`
	Capacity  uint64 `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
}

func (x *ConfigureSpaceKeeperByDirsRequest_Allocation) Reset() {
	*x = ConfigureSpaceKeeperByDirsRequest_Allocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureSpaceKeeperByDirsRequest_Allocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureSpaceKeeperByDirsRequest_Allocation) ProtoMessage() {}

func (x *ConfigureSpaceKeeperByDirsRequest_Allocation) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureSpaceKeeperByDirsRequest_Allocation.ProtoReflect.Descriptor instead.
func (*ConfigureSpaceKeeperByDirsRequest_Allocation) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{43, 0}
}

func (x *ConfigureSpaceKeeperByDirsRequest_Allocation) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *ConfigureSpaceKeeperByDirsRequest_Allocation) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

type WorkSpacesByDirsResponse_Allocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Directory  string       `protobuf:"bytes,1,opt,name=directory,proto3" json:"directory,omitempty"`
	Capacity   string       `protobuf:"bytes,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	SpaceCount uint32       `protobuf:"varint,3,opt,name=space_count,json=spaceCount,proto3" json:"space_count,omitempty"`
	Spaces     []*WorkSpace `protobuf:"bytes,4,rep,name=spaces,proto3" json:"spaces,omitempty"`
}

func (x *WorkSpacesByDirsResponse_Allocation) Reset() {
	*x = WorkSpacesByDirsResponse_Allocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkSpacesByDirsResponse_Allocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkSpacesByDirsResponse_Allocation) ProtoMessage() {}

func (x *WorkSpacesByDirsResponse_Allocation) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkSpacesByDirsResponse_Allocation.ProtoReflect.Descriptor instead.
func (*WorkSpacesByDirsResponse_Allocation) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{44, 0}
}

func (x *WorkSpacesByDirsResponse_Allocation) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *WorkSpacesByDirsResponse_Allocation) GetCapacity() string {
	if x != nil {
		return x.Capacity
	}
	return ""
}

func (x *WorkSpacesByDirsResponse_Allocation) GetSpaceCount() uint32 {
	if x != nil {
		return x.SpaceCount
	}
	return 0
}

func (x *WorkSpacesByDirsResponse_Allocation) GetSpaces() []*WorkSpace {
	if x != nil {
		return x.Spaces
	}
	return nil
}

type GetClientStatusResponsePeerCountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Outbound uint32 `protobuf:"varint,2,opt,name=outbound,proto3" json:"outbound,omitempty"`
	Inbound  uint32 `protobuf:"varint,3,opt,name=inbound,proto3" json:"inbound,omitempty"`
}

func (x *GetClientStatusResponsePeerCountInfo) Reset() {
	*x = GetClientStatusResponsePeerCountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClientStatusResponsePeerCountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientStatusResponsePeerCountInfo) ProtoMessage() {}

func (x *GetClientStatusResponsePeerCountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientStatusResponsePeerCountInfo.ProtoReflect.Descriptor instead.
func (*GetClientStatusResponsePeerCountInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{45, 0}
}

func (x *GetClientStatusResponsePeerCountInfo) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetClientStatusResponsePeerCountInfo) GetOutbound() uint32 {
	if x != nil {
		return x.Outbound
	}
	return 0
}

func (x *GetClientStatusResponsePeerCountInfo) GetInbound() uint32 {
	if x != nil {
		return x.Inbound
	}
	return 0
}

type GetClientStatusResponsePeerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Direction string `protobuf:"bytes,3,opt,name=direction,proto3" json:"direction,omitempty"`
}

func (x *GetClientStatusResponsePeerInfo) Reset() {
	*x = GetClientStatusResponsePeerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClientStatusResponsePeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientStatusResponsePeerInfo) ProtoMessage() {}

func (x *GetClientStatusResponsePeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientStatusResponsePeerInfo.ProtoReflect.Descriptor instead.
func (*GetClientStatusResponsePeerInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{45, 1}
}

func (x *GetClientStatusResponsePeerInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetClientStatusResponsePeerInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetClientStatusResponsePeerInfo) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

type GetClientStatusResponsePeerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outbound []*GetClientStatusResponsePeerInfo `protobuf:"bytes,1,rep,name=outbound,proto3" json:"outbound,omitempty"`
	Inbound  []*GetClientStatusResponsePeerInfo `protobuf:"bytes,2,rep,name=inbound,proto3" json:"inbound,omitempty"`
	Other    []*GetClientStatusResponsePeerInfo `protobuf:"bytes,3,rep,name=other,proto3" json:"other,omitempty"`
}

func (x *GetClientStatusResponsePeerList) Reset() {
	*x = GetClientStatusResponsePeerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClientStatusResponsePeerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientStatusResponsePeerList) ProtoMessage() {}

func (x *GetClientStatusResponsePeerList) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientStatusResponsePeerList.ProtoReflect.Descriptor instead.
func (*GetClientStatusResponsePeerList) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{45, 2}
}

func (x *GetClientStatusResponsePeerList) GetOutbound() []*GetClientStatusResponsePeerInfo {
	if x != nil {
		return x.Outbound
	}
	return nil
}

func (x *GetClientStatusResponsePeerList) GetInbound() []*GetClientStatusResponsePeerInfo {
	if x != nil {
		return x.Inbound
	}
	return nil
}

func (x *GetClientStatusResponsePeerList) GetOther() []*GetClientStatusResponsePeerInfo {
	if x != nil {
		return x.Other
	}
	return nil
}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x72, 0x70, 0x63,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x42, 0x79, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x32, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x42, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x65,
	0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x2e, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x25, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x22, 0x31, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x4d, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x78, 0x12, 0x17, 0x0a, 0x07,
	0x78, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x78,
	0x50, 0x72, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x74, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x69, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x22, 0x2a, 0x0a, 0x0c, 0x50, 0x6f, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x73,
	0x22, 0x65, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72,
	0x54, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x63, 0x0a, 0x03, 0x56, 0x69, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x22, 0x40, 0x0a, 0x0e,
	0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x78, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x66,
	0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x49, 0x6e, 0x54, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x12, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x73, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x73, 0x6d, 0x12,
	0x10, 0x0a, 0x03, 0x68, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x65,
	0x78, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x69, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x71, 0x53, 0x69, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x77, 0x0a, 0x04, 0x56, 0x6f,
	0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x01, 0x6e, 0x12, 0x4b, 0x0a, 0x11, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x22, 0xe9, 0x03, 0x0a, 0x0b, 0x54, 0x78, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x54, 0x78, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x22, 0x0a, 0x03, 0x76, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x69, 0x6e,
	0x52, 0x03, 0x76, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x6f, 0x75, 0x74, 0x52, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2b, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x78, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x2f, 0x0a, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72,
	0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x49, 0x6e, 0x54, 0x78, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x66, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xf3, 0x03, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x42, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x6f,
	0x43, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x0b, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x50,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x79,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x09, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x79, 0x22, 0x63, 0x0a, 0x0e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x01, 0x0a, 0x0c,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x12, 0x41, 0x0a, 0x0f,
	0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52,
	0x0e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x65, 0x61, 0x12,
	0x3a, 0x0a, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x22, 0xa5, 0x06, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x28, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x42, 0x0a, 0x0f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x50, 0x6f, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x61, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x74, 0x78, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x61, 0x77, 0x5f,
	0x74, 0x78, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x78, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x05, 0x72, 0x61, 0x77, 0x54, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x74, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x2b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x22, 0x85, 0x05, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x42,
	0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x6f, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x74, 0x63, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8e, 0x06,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x56, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x55, 0x74, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x37, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x50, 0x6f, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x72,
	0x65, 0x61, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x78, 0x69, 0x64,
	0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78, 0x69, 0x64, 0x73, 0x22, 0x36,
	0x0a, 0x0a, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x2f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x22, 0x91, 0x03, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x68, 0x65, 0x78, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x54, 0x78, 0x52,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x03, 0x76, 0x69, 0x6e, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x69, 0x6e, 0x52, 0x03, 0x76, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x6f,
	0x75, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x6f, 0x75, 0x74, 0x52, 0x04, 0x76, 0x6f, 0x75,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x54, 0x78, 0x44, 0x65, 0x73, 0x63, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x67, 0x65,
	0x22, 0xe0, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x78, 0x44, 0x65, 0x73, 0x63, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x41, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x78, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x70, 0x68, 0x61,
	0x6e, 0x54, 0x78, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x78, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x22, 0xa1, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x78,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x70, 0x68, 0x61,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f,
	0x72, 0x70, 0x68, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x78,
	0x5f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x74, 0x78, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x5f, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6f, 0x72,
	0x70, 0x68, 0x61, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x74, 0x78, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x73, 0x22, 0xb5, 0x03, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x54, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x30,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x72, 0x70, 0x68, 0x61,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74,
	0x78, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x78,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x74, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6f, 0x72, 0x70,
	0x68, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x78,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x74, 0x78, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x70, 0x68, 0x61, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x44, 0x65, 0x73, 0x63,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x74, 0x78, 0x44, 0x65, 0x73, 0x63, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x6f, 0x72, 0x70,
	0x68, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x54, 0x78, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x73, 0x22, 0xb5, 0x03, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x78, 0x50, 0x6f, 0x6f, 0x6c,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x72, 0x70, 0x68, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x78, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x70, 0x68,
	0x61, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x69, 0x6e,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x78, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x73, 0x12, 0x41,
	0x0a, 0x08, 0x74, 0x78, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x78, 0x44, 0x65, 0x73, 0x63, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x31,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x74, 0x78, 0x44, 0x65, 0x73, 0x63,
	0x73, 0x12, 0x47, 0x0a, 0x0c, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x54,
	0x78, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x6f,
	0x72, 0x70, 0x68, 0x61, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6d, 0x6d, 0x61,
	0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x69, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x77, 0x61, 0x72, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x42, 0x0a, 0x22, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x7c, 0x0a,
	0x18, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x78, 0x52, 0x61,
	0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x02, 0x74, 0x78, 0x22, 0x66, 0x0a, 0x23, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x09, 0x57,
	0x6f, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x69, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x62, 0x69, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2d, 0x0a, 0x10,
	0x57, 0x6f, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x11,
	0x57, 0x6f, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x06, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x5e, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x4f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x93, 0x02, 0x0a, 0x21, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x42, 0x79, 0x44, 0x69, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x72, 0x70, 0x63,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x42, 0x79, 0x44,
	0x69, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x1a, 0x46, 0x0a,
	0x0a, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0xf5, 0x02, 0x0a, 0x18, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x42, 0x79, 0x44, 0x69, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x0b, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x42, 0x79, 0x44, 0x69, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x97, 0x01, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x06, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x06, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0xea, 0x06,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x65, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79,
	0x6e, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x79, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x42, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x32, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x32, 0x70, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0a, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43,
	0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x1a, 0x5b, 0x0a, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x1a, 0x52, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe3, 0x01, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x49, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x47, 0x0a, 0x07,
	0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x22, 0x45, 0x0a, 0x12, 0x51, 0x75,
	0x69, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x3e, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x42, 0x79, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x22, 0x3a, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x42, 0x79, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x2c, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x0c,
	0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6e,
	0x12, 0x4b, 0x0a, 0x11, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x96, 0x03, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x54, 0x78,
	0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x03,
	0x76, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x69, 0x6e, 0x52, 0x03, 0x76, 0x69, 0x6e,
	0x12, 0x2d, 0x0a, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x75, 0x74, 0x52, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x75, 0x0a, 0x15, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x22, 0x34, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68,
	0x72, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x50,
	0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x77,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x22, 0x65, 0x0a, 0x16, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x44, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x4b, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x35, 0x0a, 0x13, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73,
	0x65, 0x22, 0x46, 0x0a, 0x14, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x44, 0x0a, 0x12, 0x4c, 0x6f, 0x63,
	0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x60, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x70, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x76, 0x70, 0x61, 0x73, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x70, 0x61, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x76, 0x70, 0x61, 0x73,
	0x73, 0x22, 0x35, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x5b, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x70, 0x61,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x50, 0x75, 0x62,
	0x70, 0x61, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x75, 0x62, 0x70,
	0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x50, 0x75,
	0x62, 0x70, 0x61, 0x73, 0x73, 0x22, 0x34, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x3d, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4c, 0x0a, 0x14, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x6e, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x71, 0x75, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x65, 0x71, 0x75, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x16, 0x47, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x6e, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x37, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x6e, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x61,
	0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65,
	0x6e, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65,
	0x6e, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0xcf, 0x23, 0x0a, 0x0a, 0x41, 0x70,
	0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42,
	0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x21, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x62, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x7b, 0x68, 0x61, 0x73, 0x68, 0x7d,
	0x12, 0x8d, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x2e, 0x72, 0x70, 0x63, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x42, 0x79,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x2f, 0x7b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x7d,
	0x12, 0x7b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x70, 0x63,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x2f, 0x7b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x7d, 0x12, 0x7b, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x22, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x7b, 0x68, 0x61,
	0x73, 0x68, 0x7d, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x99, 0x01, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x79, 0x50,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x42, 0x79, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x79,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x7d, 0x12, 0x66, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x56, 0x32, 0x12, 0x1e, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x56, 0x32, 0x1a, 0x1f, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x56, 0x32, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f,
	0x76, 0x32, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x77,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x56, 0x32, 0x12, 0x1e, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x56, 0x32, 0x1a, 0x23, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12,
	0x16, 0x2f, 0x76, 0x32, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x31, 0x56, 0x32, 0x12, 0x1e, 0x2e,
	0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x1a, 0x1d, 0x2e,
	0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x32, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x2f, 0x31, 0x12,
	0x7c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1f,
	0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x7b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x7d, 0x12, 0x62, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x54, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6f,
	0x6c, 0x12, 0x7c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x30, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26,
	0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x30, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x2f, 0x30, 0x12,
	0x7c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x31, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x72,
	0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78,
	0x50, 0x6f, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x31, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x2f, 0x31, 0x12, 0x85, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x50, 0x6f,
	0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29,
	0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6f, 0x6c,
	0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0xaf, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2f, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x78,
	0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54,
	0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27,
	0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x7e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x72,
	0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x78, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x28, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x11, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x28,
	0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0f, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0x76, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x42, 0x79, 0x44, 0x69, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x42, 0x79, 0x44, 0x69,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x91, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x42, 0x79,
	0x44, 0x69, 0x72, 0x73, 0x12, 0x2e, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x42, 0x79, 0x44, 0x69, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x42, 0x79, 0x44,
	0x69, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x70, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x1d, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x6f,
	0x0a, 0x12, 0x50, 0x6c, 0x6f, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x72,
	0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x63, 0x74, 0x4f, 0x6e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x6c, 0x6f, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0x80, 0x01, 0x0a, 0x11, 0x50, 0x6c, 0x6f, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x63, 0x74, 0x4f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x6c, 0x6f, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x25, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x63, 0x74, 0x4f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22,
	0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x69, 0x6e, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x80, 0x01, 0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x72, 0x70, 0x63, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x63, 0x74, 0x4f, 0x6e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d,
	0x69, 0x6e, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x63, 0x74, 0x4f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x74, 0x6f, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0x80, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x2e,
	0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72,
	0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x63, 0x74, 0x4f, 0x6e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x61, 0x0a, 0x0a, 0x51, 0x75, 0x69, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x72,
	0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x51, 0x75, 0x69, 0x74, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x71, 0x75, 0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x0e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76,
	0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x70, 0x63, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x5c, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b,
	0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x75, 0x0a, 0x0c, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x2f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x3a,
	0x01, 0x2a, 0x12, 0x65, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x2f, 0x6c,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01, 0x0a, 0x11, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x12,
	0x25, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x70, 0x61, 0x73, 0x73, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x61, 0x73, 0x73, 0x12, 0x24, 0x2e,
	0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x61,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x2f,
	0x70, 0x75, 0x62, 0x70, 0x61, 0x73, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67,
	0x3a, 0x01, 0x2a, 0x12, 0x95, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x42, 0x82, 0x02, 0x92, 0x41,
	0xfe, 0x01, 0x12, 0x52, 0x0a, 0x0d, 0x53, 0x4b, 0x54, 0x2d, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x20,
	0x41, 0x50, 0x49, 0x22, 0x3a, 0x0a, 0x0b, 0x53, 0x4b, 0x54, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x15, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x73, 0x75, 0x6b, 0x68,
	0x61, 0x76, 0x61, 0x74, 0x69, 0x2e, 0x69, 0x6f, 0x2f, 0x1a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x40, 0x73, 0x75, 0x6b, 0x68, 0x61, 0x76, 0x61, 0x74, 0x69, 0x2e, 0x69, 0x6f, 0x2a,
	0x00, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x32, 0x16, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x2d, 0x66, 0x6f, 0x6f, 0x2d, 0x6d,
	0x69, 0x6d, 0x65, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x78, 0x2d, 0x66, 0x6f, 0x6f, 0x2d, 0x6d, 0x69, 0x6d, 0x65, 0x52, 0x1b, 0x0a,
	0x03, 0x34, 0x30, 0x34, 0x12, 0x14, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x07, 0x72, 0x34, 0x0a, 0x1b, 0x53, 0x4b,
	0x54, 0x2d, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x20, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x73, 0x75, 0x6b, 0x68, 0x61, 0x76, 0x61, 0x74, 0x69, 0x2e, 0x69, 0x6f, 0x2f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData = file_api_proto_rawDesc
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_rawDescData)
	})
	return file_api_proto_rawDescData
}

var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 74)
var file_api_proto_goTypes = []interface{}{
	(*GetBlockHashByHeightRequest)(nil),                  // 0: rpcprotobuf.GetBlockHashByHeightRequest
	(*GetBlockHashByHeightResponse)(nil),                 // 1: rpcprotobuf.GetBlockHashByHeightResponse
	(*GetBestBlockResponse)(nil),                         // 2: rpcprotobuf.GetBestBlockResponse
	(*GetBestBlockHashResponse)(nil),                     // 3: rpcprotobuf.GetBestBlockHashResponse
	(*GetBlockRequest)(nil),                              // 4: rpcprotobuf.GetBlockRequest
	(*GetBlockByHeightRequest)(nil),                      // 5: rpcprotobuf.GetBlockByHeightRequest
	(*Proof)(nil),                                        // 6: rpcprotobuf.Proof
	(*PoCSignature)(nil),                                 // 7: rpcprotobuf.PoCSignature
	(*BlockInfoForTx)(nil),                               // 8: rpcprotobuf.BlockInfoForTx
	(*Vin)(nil),                                          // 9: rpcprotobuf.Vin
	(*ToAddressForTx)(nil),                               // 10: rpcprotobuf.ToAddressForTx
	(*InputsInTx)(nil),                                   // 11: rpcprotobuf.InputsInTx
	(*ScriptPubKeyResult)(nil),                           // 12: rpcprotobuf.ScriptPubKeyResult
	(*Vout)(nil),                                         // 13: rpcprotobuf.Vout
	(*TxRawResult)(nil),                                  // 14: rpcprotobuf.TxRawResult
	(*Header)(nil),                                       // 15: rpcprotobuf.Header
	(*FaultPubKey)(nil),                                  // 16: rpcprotobuf.FaultPubKey
	(*NormalProposal)(nil),                               // 17: rpcprotobuf.NormalProposal
	(*ProposalArea)(nil),                                 // 18: rpcprotobuf.ProposalArea
	(*GetBlockResponse)(nil),                             // 19: rpcprotobuf.GetBlockResponse
	(*GetBlockHeaderRequest)(nil),                        // 20: rpcprotobuf.GetBlockHeaderRequest
	(*GetBlockHeaderResponse)(nil),                       // 21: rpcprotobuf.GetBlockHeaderResponse
	(*GetBlockRequestV2)(nil),                            // 22: rpcprotobuf.GetBlockRequestV2
	(*GetBlockResponseV2)(nil),                           // 23: rpcprotobuf.GetBlockResponseV2
	(*TxOutPoint)(nil),                                   // 24: rpcprotobuf.TxOutPoint
	(*GetRawTransactionRequest)(nil),                     // 25: rpcprotobuf.GetRawTransactionRequest
	(*GetRawTransactionResponse)(nil),                    // 26: rpcprotobuf.GetRawTransactionResponse
	(*GetTxDescVerbose0Response)(nil),                    // 27: rpcprotobuf.GetTxDescVerbose0Response
	(*GetTxDescVerbose1Response)(nil),                    // 28: rpcprotobuf.GetTxDescVerbose1Response
	(*GetOrphanTxDescResponse)(nil),                      // 29: rpcprotobuf.GetOrphanTxDescResponse
	(*GetTxPoolResponse)(nil),                            // 30: rpcprotobuf.GetTxPoolResponse
	(*GetTxPoolVerbose0Response)(nil),                    // 31: rpcprotobuf.GetTxPoolVerbose0Response
	(*GetTxPoolVerbose1Response)(nil),                    // 32: rpcprotobuf.GetTxPoolVerbose1Response
	(*GetStakingTxPoolInfoResponse)(nil),                 // 33: rpcprotobuf.GetStakingTxPoolInfoResponse
	(*GetStakingTxPoolAwardRecordRequest)(nil),           // 34: rpcprotobuf.GetStakingTxPoolAwardRecordRequest
	(*StakingTxPoolAwardRecord)(nil),                     // 35: rpcprotobuf.StakingTxPoolAwardRecord
	(*GetStakingTxPoolAwardRecordResponse)(nil),          // 36: rpcprotobuf.GetStakingTxPoolAwardRecordResponse
	(*ConfigureSpaceKeeperRequest)(nil),                  // 37: rpcprotobuf.ConfigureSpaceKeeperRequest
	(*WorkSpace)(nil),                                    // 38: rpcprotobuf.WorkSpace
	(*WorkSpaceRequest)(nil),                             // 39: rpcprotobuf.WorkSpaceRequest
	(*WorkSpaceResponse)(nil),                            // 40: rpcprotobuf.WorkSpaceResponse
	(*WorkSpacesResponse)(nil),                           // 41: rpcprotobuf.WorkSpacesResponse
	(*ActOnSpaceKeeperResponse)(nil),                     // 42: rpcprotobuf.ActOnSpaceKeeperResponse
	(*ConfigureSpaceKeeperByDirsRequest)(nil),            // 43: rpcprotobuf.ConfigureSpaceKeeperByDirsRequest
	(*WorkSpacesByDirsResponse)(nil),                     // 44: rpcprotobuf.WorkSpacesByDirsResponse
	(*GetClientStatusResponse)(nil),                      // 45: rpcprotobuf.GetClientStatusResponse
	(*QuitClientResponse)(nil),                           // 46: rpcprotobuf.QuitClientResponse
	(*GetBlockHeightByPubKeyRequest)(nil),                // 47: rpcprotobuf.GetBlockHeightByPubKeyRequest
	(*GetBlockHeightByPubKeyResponse)(nil),               // 48: rpcprotobuf.GetBlockHeightByPubKeyResponse
	(*GetCoinbaseRequest)(nil),                           // 49: rpcprotobuf.GetCoinbaseRequest
	(*CoinbaseVout)(nil),                                 // 50: rpcprotobuf.CoinbaseVout
	(*GetCoinbaseResponse)(nil),                          // 51: rpcprotobuf.GetCoinbaseResponse
	(*ExportKeystoreRequest)(nil),                        // 52: rpcprotobuf.ExportKeystoreRequest
	(*ExportKeystoreResponse)(nil),                       // 53: rpcprotobuf.ExportKeystoreResponse
	(*ImportKeystoreRequest)(nil),                        // 54: rpcprotobuf.ImportKeystoreRequest
	(*ImportKeystoreResponse)(nil),                       // 55: rpcprotobuf.ImportKeystoreResponse
	(*WalletSummary)(nil),                                // 56: rpcprotobuf.WalletSummary
	(*GetKeystoreResponse)(nil),                          // 57: rpcprotobuf.GetKeystoreResponse
	(*UnlockWalletRequest)(nil),                          // 58: rpcprotobuf.UnlockWalletRequest
	(*UnlockWalletResponse)(nil),                         // 59: rpcprotobuf.UnlockWalletResponse
	(*LockWalletResponse)(nil),                           // 60: rpcprotobuf.LockWalletResponse
	(*ChangePrivatePassRequest)(nil),                     // 61: rpcprotobuf.ChangePrivatePassRequest
	(*ChangePrivatePassResponse)(nil),                    // 62: rpcprotobuf.ChangePrivatePassResponse
	(*ChangePublicPassRequest)(nil),                      // 63: rpcprotobuf.ChangePublicPassRequest
	(*ChangePublicPassResponse)(nil),                     // 64: rpcprotobuf.ChangePublicPassResponse
	(*GetGovernanceConfigRequest)(nil),                   // 65: rpcprotobuf.GetGovernanceConfigRequest
	(*GovernanceSenateNode)(nil),                         // 66: rpcprotobuf.GovernanceSenateNode
	(*GovernanceSenateConfig)(nil),                       // 67: rpcprotobuf.GovernanceSenateConfig
	(*GetGovernanceConfigResponse)(nil),                  // 68: rpcprotobuf.GetGovernanceConfigResponse
	(*ConfigureSpaceKeeperByDirsRequest_Allocation)(nil), // 69: rpcprotobuf.ConfigureSpaceKeeperByDirsRequest.Allocation
	(*WorkSpacesByDirsResponse_Allocation)(nil),          // 70: rpcprotobuf.WorkSpacesByDirsResponse.Allocation
	(*GetClientStatusResponsePeerCountInfo)(nil),         // 71: rpcprotobuf.GetClientStatusResponse.peerCountInfo
	(*GetClientStatusResponsePeerInfo)(nil),              // 72: rpcprotobuf.GetClientStatusResponse.peerInfo
	(*GetClientStatusResponsePeerList)(nil),              // 73: rpcprotobuf.GetClientStatusResponse.peerList
	(*emptypb.Empty)(nil),                                // 74: google.protobuf.Empty
}
var file_api_proto_depIdxs = []int32{
	12, // 0: rpcprotobuf.Vout.script_public_key:type_name -> rpcprotobuf.ScriptPubKeyResult
	8,  // 1: rpcprotobuf.TxRawResult.block:type_name -> rpcprotobuf.BlockInfoForTx
	9,  // 2: rpcprotobuf.TxRawResult.vin:type_name -> rpcprotobuf.Vin
	13, // 3: rpcprotobuf.TxRawResult.vout:type_name -> rpcprotobuf.Vout
	10, // 4: rpcprotobuf.TxRawResult.to:type_name -> rpcprotobuf.ToAddressForTx
	11, // 5: rpcprotobuf.TxRawResult.inputs:type_name -> rpcprotobuf.InputsInTx
	6,  // 6: rpcprotobuf.Header.proof:type_name -> rpcprotobuf.Proof
	7,  // 7: rpcprotobuf.Header.block_signature:type_name -> rpcprotobuf.PoCSignature
	15, // 8: rpcprotobuf.FaultPubKey.testimony:type_name -> rpcprotobuf.Header
	16, // 9: rpcprotobuf.ProposalArea.punishment_area:type_name -> rpcprotobuf.FaultPubKey
	17, // 10: rpcprotobuf.ProposalArea.other_area:type_name -> rpcprotobuf.NormalProposal
	6,  // 11: rpcprotobuf.GetBlockResponse.proof:type_name -> rpcprotobuf.Proof
	7,  // 12: rpcprotobuf.GetBlockResponse.block_signature:type_name -> rpcprotobuf.PoCSignature
	18, // 13: rpcprotobuf.GetBlockResponse.proposal_area:type_name -> rpcprotobuf.ProposalArea
	14, // 14: rpcprotobuf.GetBlockResponse.raw_tx:type_name -> rpcprotobuf.TxRawResult
	6,  // 15: rpcprotobuf.GetBlockHeaderResponse.proof:type_name -> rpcprotobuf.Proof
	7,  // 16: rpcprotobuf.GetBlockHeaderResponse.block_signature:type_name -> rpcprotobuf.PoCSignature
	6,  // 17: rpcprotobuf.GetBlockResponseV2.proof:type_name -> rpcprotobuf.Proof
	7,  // 18: rpcprotobuf.GetBlockResponseV2.signature:type_name -> rpcprotobuf.PoCSignature
	18, // 19: rpcprotobuf.GetBlockResponseV2.proposals:type_name -> rpcprotobuf.ProposalArea
	8,  // 20: rpcprotobuf.GetRawTransactionResponse.block:type_name -> rpcprotobuf.BlockInfoForTx
	9,  // 21: rpcprotobuf.GetRawTransactionResponse.vin:type_name -> rpcprotobuf.Vin
	13, // 22: rpcprotobuf.GetRawTransactionResponse.vout:type_name -> rpcprotobuf.Vout
	24, // 23: rpcprotobuf.GetTxDescVerbose1Response.depends:type_name -> rpcprotobuf.TxOutPoint
	24, // 24: rpcprotobuf.GetOrphanTxDescResponse.depends:type_name -> rpcprotobuf.TxOutPoint
	27, // 25: rpcprotobuf.GetTxPoolVerbose0Response.tx_descs:type_name -> rpcprotobuf.GetTxDescVerbose0Response
	29, // 26: rpcprotobuf.GetTxPoolVerbose0Response.orphan_descs:type_name -> rpcprotobuf.GetOrphanTxDescResponse
	28, // 27: rpcprotobuf.GetTxPoolVerbose1Response.tx_descs:type_name -> rpcprotobuf.GetTxDescVerbose1Response
	29, // 28: rpcprotobuf.GetTxPoolVerbose1Response.orphan_descs:type_name -> rpcprotobuf.GetOrphanTxDescResponse
	14, // 29: rpcprotobuf.StakingTxPoolAwardRecord.tx:type_name -> rpcprotobuf.TxRawResult
	35, // 30: rpcprotobuf.GetStakingTxPoolAwardRecordResponse.records:type_name -> rpcprotobuf.StakingTxPoolAwardRecord
	38, // 31: rpcprotobuf.WorkSpaceResponse.space:type_name -> rpcprotobuf.WorkSpace
	38, // 32: rpcprotobuf.WorkSpacesResponse.spaces:type_name -> rpcprotobuf.WorkSpace
	69, // 33: rpcprotobuf.ConfigureSpaceKeeperByDirsRequest.allocations:type_name -> rpcprotobuf.ConfigureSpaceKeeperByDirsRequest.Allocation
	70, // 34: rpcprotobuf.WorkSpacesByDirsResponse.allocations:type_name -> rpcprotobuf.WorkSpacesByDirsResponse.Allocation
	71, // 35: rpcprotobuf.GetClientStatusResponse.peer_count:type_name -> rpcprotobuf.GetClientStatusResponse.peerCountInfo
	73, // 36: rpcprotobuf.GetClientStatusResponse.peers:type_name -> rpcprotobuf.GetClientStatusResponse.peerList
	12, // 37: rpcprotobuf.CoinbaseVout.script_public_key:type_name -> rpcprotobuf.ScriptPubKeyResult
	8,  // 38: rpcprotobuf.GetCoinbaseResponse.block:type_name -> rpcprotobuf.BlockInfoForTx
	9,  // 39: rpcprotobuf.GetCoinbaseResponse.vin:type_name -> rpcprotobuf.Vin
	50, // 40: rpcprotobuf.GetCoinbaseResponse.vout:type_name -> rpcprotobuf.CoinbaseVout
	56, // 41: rpcprotobuf.GetKeystoreResponse.wallets:type_name -> rpcprotobuf.WalletSummary
	66, // 42: rpcprotobuf.GovernanceSenateConfig.nodes:type_name -> rpcprotobuf.GovernanceSenateNode
	67, // 43: rpcprotobuf.GetGovernanceConfigResponse.senate_nodes_config:type_name -> rpcprotobuf.GovernanceSenateConfig
	38, // 44: rpcprotobuf.WorkSpacesByDirsResponse.Allocation.spaces:type_name -> rpcprotobuf.WorkSpace
	72, // 45: rpcprotobuf.GetClientStatusResponse.peerList.outbound:type_name -> rpcprotobuf.GetClientStatusResponse.peerInfo
	72, // 46: rpcprotobuf.GetClientStatusResponse.peerList.inbound:type_name -> rpcprotobuf.GetClientStatusResponse.peerInfo
	72, // 47: rpcprotobuf.GetClientStatusResponse.peerList.other:type_name -> rpcprotobuf.GetClientStatusResponse.peerInfo
	74, // 48: rpcprotobuf.ApiService.GetBestBlock:input_type -> google.protobuf.Empty
	4,  // 49: rpcprotobuf.ApiService.GetBlock:input_type -> rpcprotobuf.GetBlockRequest
	0,  // 50: rpcprotobuf.ApiService.GetBlockHashByHeight:input_type -> rpcprotobuf.GetBlockHashByHeightRequest
	5,  // 51: rpcprotobuf.ApiService.GetBlockByHeight:input_type -> rpcprotobuf.GetBlockByHeightRequest
	20, // 52: rpcprotobuf.ApiService.GetBlockHeader:input_type -> rpcprotobuf.GetBlockHeaderRequest
	47, // 53: rpcprotobuf.ApiService.GetBlockHeightByPubKey:input_type -> rpcprotobuf.GetBlockHeightByPubKeyRequest
	22, // 54: rpcprotobuf.ApiService.GetBlockV2:input_type -> rpcprotobuf.GetBlockRequestV2
	22, // 55: rpcprotobuf.ApiService.GetBlockHeaderV2:input_type -> rpcprotobuf.GetBlockRequestV2
	22, // 56: rpcprotobuf.ApiService.GetBlockVerbose1V2:input_type -> rpcprotobuf.GetBlockRequestV2
	49, // 57: rpcprotobuf.ApiService.GetCoinbase:input_type -> rpcprotobuf.GetCoinbaseRequest
	74, // 58: rpcprotobuf.ApiService.GetTxPool:input_type -> google.protobuf.Empty
	74, // 59: rpcprotobuf.ApiService.GetTxPoolVerbose0:input_type -> google.protobuf.Empty
	74, // 60: rpcprotobuf.ApiService.GetTxPoolVerbose1:input_type -> google.protobuf.Empty
	74, // 61: rpcprotobuf.ApiService.GetStakingTxPoolInfo:input_type -> google.protobuf.Empty
	34, // 62: rpcprotobuf.ApiService.GetStakingTxPoolAwardRecord:input_type -> rpcprotobuf.GetStakingTxPoolAwardRecordRequest
	25, // 63: rpcprotobuf.ApiService.GetRawTransaction:input_type -> rpcprotobuf.GetRawTransactionRequest
	74, // 64: rpcprotobuf.ApiService.GetCapacitySpaces:input_type -> google.protobuf.Empty
	37, // 65: rpcprotobuf.ApiService.ConfigureCapacity:input_type -> rpcprotobuf.ConfigureSpaceKeeperRequest
	74, // 66: rpcprotobuf.ApiService.GetCapacitySpacesByDirs:input_type -> google.protobuf.Empty
	43, // 67: rpcprotobuf.ApiService.ConfigureCapacityByDirs:input_type -> rpcprotobuf.ConfigureSpaceKeeperByDirsRequest
	39, // 68: rpcprotobuf.ApiService.GetCapacitySpace:input_type -> rpcprotobuf.WorkSpaceRequest
	74, // 69: rpcprotobuf.ApiService.PlotCapacitySpaces:input_type -> google.protobuf.Empty
	39, // 70: rpcprotobuf.ApiService.PlotCapacitySpace:input_type -> rpcprotobuf.WorkSpaceRequest
	74, // 71: rpcprotobuf.ApiService.MineCapacitySpaces:input_type -> google.protobuf.Empty
	39, // 72: rpcprotobuf.ApiService.MineCapacitySpace:input_type -> rpcprotobuf.WorkSpaceRequest
	74, // 73: rpcprotobuf.ApiService.StopCapacitySpaces:input_type -> google.protobuf.Empty
	39, // 74: rpcprotobuf.ApiService.StopCapacitySpace:input_type -> rpcprotobuf.WorkSpaceRequest
	74, // 75: rpcprotobuf.ApiService.GetClientStatus:input_type -> google.protobuf.Empty
	74, // 76: rpcprotobuf.ApiService.QuitClient:input_type -> google.protobuf.Empty
	52, // 77: rpcprotobuf.ApiService.ExportKeystore:input_type -> rpcprotobuf.ExportKeystoreRequest
	54, // 78: rpcprotobuf.ApiService.ImportKeystore:input_type -> rpcprotobuf.ImportKeystoreRequest
	74, // 79: rpcprotobuf.ApiService.GetKeystore:input_type -> google.protobuf.Empty
	58, // 80: rpcprotobuf.ApiService.UnlockWallet:input_type -> rpcprotobuf.UnlockWalletRequest
	74, // 81: rpcprotobuf.ApiService.LockWallet:input_type -> google.protobuf.Empty
	61, // 82: rpcprotobuf.ApiService.ChangePrivatePass:input_type -> rpcprotobuf.ChangePrivatePassRequest
	63, // 83: rpcprotobuf.ApiService.ChangePublicPass:input_type -> rpcprotobuf.ChangePublicPassRequest
	65, // 84: rpcprotobuf.ApiService.GetGovernanceConfig:input_type -> rpcprotobuf.GetGovernanceConfigRequest
	2,  // 85: rpcprotobuf.ApiService.GetBestBlock:output_type -> rpcprotobuf.GetBestBlockResponse
	19, // 86: rpcprotobuf.ApiService.GetBlock:output_type -> rpcprotobuf.GetBlockResponse
	1,  // 87: rpcprotobuf.ApiService.GetBlockHashByHeight:output_type -> rpcprotobuf.GetBlockHashByHeightResponse
	19, // 88: rpcprotobuf.ApiService.GetBlockByHeight:output_type -> rpcprotobuf.GetBlockResponse
	21, // 89: rpcprotobuf.ApiService.GetBlockHeader:output_type -> rpcprotobuf.GetBlockHeaderResponse
	48, // 90: rpcprotobuf.ApiService.GetBlockHeightByPubKey:output_type -> rpcprotobuf.GetBlockHeightByPubKeyResponse
	23, // 91: rpcprotobuf.ApiService.GetBlockV2:output_type -> rpcprotobuf.GetBlockResponseV2
	21, // 92: rpcprotobuf.ApiService.GetBlockHeaderV2:output_type -> rpcprotobuf.GetBlockHeaderResponse
	19, // 93: rpcprotobuf.ApiService.GetBlockVerbose1V2:output_type -> rpcprotobuf.GetBlockResponse
	51, // 94: rpcprotobuf.ApiService.GetCoinbase:output_type -> rpcprotobuf.GetCoinbaseResponse
	30, // 95: rpcprotobuf.ApiService.GetTxPool:output_type -> rpcprotobuf.GetTxPoolResponse
	31, // 96: rpcprotobuf.ApiService.GetTxPoolVerbose0:output_type -> rpcprotobuf.GetTxPoolVerbose0Response
	32, // 97: rpcprotobuf.ApiService.GetTxPoolVerbose1:output_type -> rpcprotobuf.GetTxPoolVerbose1Response
	33, // 98: rpcprotobuf.ApiService.GetStakingTxPoolInfo:output_type -> rpcprotobuf.GetStakingTxPoolInfoResponse
	36, // 99: rpcprotobuf.ApiService.GetStakingTxPoolAwardRecord:output_type -> rpcprotobuf.GetStakingTxPoolAwardRecordResponse
	14, // 100: rpcprotobuf.ApiService.GetRawTransaction:output_type -> rpcprotobuf.TxRawResult
	41, // 101: rpcprotobuf.ApiService.GetCapacitySpaces:output_type -> rpcprotobuf.WorkSpacesResponse
	41, // 102: rpcprotobuf.ApiService.ConfigureCapacity:output_type -> rpcprotobuf.WorkSpacesResponse
	44, // 103: rpcprotobuf.ApiService.GetCapacitySpacesByDirs:output_type -> rpcprotobuf.WorkSpacesByDirsResponse
	44, // 104: rpcprotobuf.ApiService.ConfigureCapacityByDirs:output_type -> rpcprotobuf.WorkSpacesByDirsResponse
	40, // 105: rpcprotobuf.ApiService.GetCapacitySpace:output_type -> rpcprotobuf.WorkSpaceResponse
	42, // 106: rpcprotobuf.ApiService.PlotCapacitySpaces:output_type -> rpcprotobuf.ActOnSpaceKeeperResponse
	42, // 107: rpcprotobuf.ApiService.PlotCapacitySpace:output_type -> rpcprotobuf.ActOnSpaceKeeperResponse
	42, // 108: rpcprotobuf.ApiService.MineCapacitySpaces:output_type -> rpcprotobuf.ActOnSpaceKeeperResponse
	42, // 109: rpcprotobuf.ApiService.MineCapacitySpace:output_type -> rpcprotobuf.ActOnSpaceKeeperResponse
	42, // 110: rpcprotobuf.ApiService.StopCapacitySpaces:output_type -> rpcprotobuf.ActOnSpaceKeeperResponse
	42, // 111: rpcprotobuf.ApiService.StopCapacitySpace:output_type -> rpcprotobuf.ActOnSpaceKeeperResponse
	45, // 112: rpcprotobuf.ApiService.GetClientStatus:output_type -> rpcprotobuf.GetClientStatusResponse
	46, // 113: rpcprotobuf.ApiService.QuitClient:output_type -> rpcprotobuf.QuitClientResponse
	53, // 114: rpcprotobuf.ApiService.ExportKeystore:output_type -> rpcprotobuf.ExportKeystoreResponse
	55, // 115: rpcprotobuf.ApiService.ImportKeystore:output_type -> rpcprotobuf.ImportKeystoreResponse
	57, // 116: rpcprotobuf.ApiService.GetKeystore:output_type -> rpcprotobuf.GetKeystoreResponse
	59, // 117: rpcprotobuf.ApiService.UnlockWallet:output_type -> rpcprotobuf.UnlockWalletResponse
	60, // 118: rpcprotobuf.ApiService.LockWallet:output_type -> rpcprotobuf.LockWalletResponse
	62, // 119: rpcprotobuf.ApiService.ChangePrivatePass:output_type -> rpcprotobuf.ChangePrivatePassResponse
	64, // 120: rpcprotobuf.ApiService.ChangePublicPass:output_type -> rpcprotobuf.ChangePublicPassResponse
	68, // 121: rpcprotobuf.ApiService.GetGovernanceConfig:output_type -> rpcprotobuf.GetGovernanceConfigResponse
	85, // [85:122] is the sub-list for method output_type
	48, // [48:85] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockHashByHeightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockHashByHeightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBestBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBestBlockHashResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockByHeightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoCSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockInfoForTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToAddressForTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsInTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptPubKeyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxRawResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaultPubKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockHeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockRequestV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockResponseV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOutPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxDescVerbose0Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxDescVerbose1Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrphanTxDescResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxPoolVerbose0Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxPoolVerbose1Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStakingTxPoolInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStakingTxPoolAwardRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingTxPoolAwardRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStakingTxPoolAwardRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureSpaceKeeperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkSpaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkSpaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkSpacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActOnSpaceKeeperResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureSpaceKeeperByDirsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkSpacesByDirsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClientStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuitClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockHeightByPubKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockHeightByPubKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinbaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinbaseVout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinbaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportKeystoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportKeystoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportKeystoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportKeystoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeystoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePrivatePassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePrivatePassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePublicPassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePublicPassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGovernanceConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernanceSenateNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernanceSenateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGovernanceConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureSpaceKeeperByDirsRequest_Allocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkSpacesByDirsResponse_Allocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClientStatusResponsePeerCountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClientStatusResponsePeerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClientStatusResponsePeerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_proto_msgTypes[68].OneofWrappers = []interface{}{
		(*GetGovernanceConfigResponse_SenateNodesConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   74,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiServiceClient interface {
	GetBestBlock(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBestBlockResponse, error)
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	GetBlockHashByHeight(ctx context.Context, in *GetBlockHashByHeightRequest, opts ...grpc.CallOption) (*GetBlockHashByHeightResponse, error)
	GetBlockByHeight(ctx context.Context, in *GetBlockByHeightRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	GetBlockHeader(ctx context.Context, in *GetBlockHeaderRequest, opts ...grpc.CallOption) (*GetBlockHeaderResponse, error)
	GetBlockHeightByPubKey(ctx context.Context, in *GetBlockHeightByPubKeyRequest, opts ...grpc.CallOption) (*GetBlockHeightByPubKeyResponse, error)
	GetBlockV2(ctx context.Context, in *GetBlockRequestV2, opts ...grpc.CallOption) (*GetBlockResponseV2, error)
	GetBlockHeaderV2(ctx context.Context, in *GetBlockRequestV2, opts ...grpc.CallOption) (*GetBlockHeaderResponse, error)
	GetBlockVerbose1V2(ctx context.Context, in *GetBlockRequestV2, opts ...grpc.CallOption) (*GetBlockResponse, error)
	GetCoinbase(ctx context.Context, in *GetCoinbaseRequest, opts ...grpc.CallOption) (*GetCoinbaseResponse, error)
	GetTxPool(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTxPoolResponse, error)
	GetTxPoolVerbose0(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTxPoolVerbose0Response, error)
	GetTxPoolVerbose1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTxPoolVerbose1Response, error)
	GetStakingTxPoolInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStakingTxPoolInfoResponse, error)
	GetStakingTxPoolAwardRecord(ctx context.Context, in *GetStakingTxPoolAwardRecordRequest, opts ...grpc.CallOption) (*GetStakingTxPoolAwardRecordResponse, error)
	//get tx from chain db or mempool
	GetRawTransaction(ctx context.Context, in *GetRawTransactionRequest, opts ...grpc.CallOption) (*TxRawResult, error)
	GetCapacitySpaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WorkSpacesResponse, error)
	ConfigureCapacity(ctx context.Context, in *ConfigureSpaceKeeperRequest, opts ...grpc.CallOption) (*WorkSpacesResponse, error)
	GetCapacitySpacesByDirs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WorkSpacesByDirsResponse, error)
	ConfigureCapacityByDirs(ctx context.Context, in *ConfigureSpaceKeeperByDirsRequest, opts ...grpc.CallOption) (*WorkSpacesByDirsResponse, error)
	GetCapacitySpace(ctx context.Context, in *WorkSpaceRequest, opts ...grpc.CallOption) (*WorkSpaceResponse, error)
	PlotCapacitySpaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ActOnSpaceKeeperResponse, error)
	PlotCapacitySpace(ctx context.Context, in *WorkSpaceRequest, opts ...grpc.CallOption) (*ActOnSpaceKeeperResponse, error)
	MineCapacitySpaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ActOnSpaceKeeperResponse, error)
	MineCapacitySpace(ctx context.Context, in *WorkSpaceRequest, opts ...grpc.CallOption) (*ActOnSpaceKeeperResponse, error)
	StopCapacitySpaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ActOnSpaceKeeperResponse, error)
	StopCapacitySpace(ctx context.Context, in *WorkSpaceRequest, opts ...grpc.CallOption) (*ActOnSpaceKeeperResponse, error)
	GetClientStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetClientStatusResponse, error)
	QuitClient(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*QuitClientResponse, error)
	ExportKeystore(ctx context.Context, in *ExportKeystoreRequest, opts ...grpc.CallOption) (*ExportKeystoreResponse, error)
	ImportKeystore(ctx context.Context, in *ImportKeystoreRequest, opts ...grpc.CallOption) (*ImportKeystoreResponse, error)
	GetKeystore(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetKeystoreResponse, error)
	UnlockWallet(ctx context.Context, in *UnlockWalletRequest, opts ...grpc.CallOption) (*UnlockWalletResponse, error)
	LockWallet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LockWalletResponse, error)
	ChangePrivatePass(ctx context.Context, in *ChangePrivatePassRequest, opts ...grpc.CallOption) (*ChangePrivatePassResponse, error)
	ChangePublicPass(ctx context.Context, in *ChangePublicPassRequest, opts ...grpc.CallOption) (*ChangePublicPassResponse, error)
	GetGovernanceConfig(ctx context.Context, in *GetGovernanceConfigRequest, opts ...grpc.CallOption) (*GetGovernanceConfigResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) GetBestBlock(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBestBlockResponse, error) {
	out := new(GetBestBlockResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetBestBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlockHashByHeight(ctx context.Context, in *GetBlockHashByHeightRequest, opts ...grpc.CallOption) (*GetBlockHashByHeightResponse, error) {
	out := new(GetBlockHashByHeightResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetBlockHashByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlockByHeight(ctx context.Context, in *GetBlockByHeightRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetBlockByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlockHeader(ctx context.Context, in *GetBlockHeaderRequest, opts ...grpc.CallOption) (*GetBlockHeaderResponse, error) {
	out := new(GetBlockHeaderResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetBlockHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlockHeightByPubKey(ctx context.Context, in *GetBlockHeightByPubKeyRequest, opts ...grpc.CallOption) (*GetBlockHeightByPubKeyResponse, error) {
	out := new(GetBlockHeightByPubKeyResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetBlockHeightByPubKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlockV2(ctx context.Context, in *GetBlockRequestV2, opts ...grpc.CallOption) (*GetBlockResponseV2, error) {
	out := new(GetBlockResponseV2)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetBlockV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlockHeaderV2(ctx context.Context, in *GetBlockRequestV2, opts ...grpc.CallOption) (*GetBlockHeaderResponse, error) {
	out := new(GetBlockHeaderResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetBlockHeaderV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlockVerbose1V2(ctx context.Context, in *GetBlockRequestV2, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetBlockVerbose1V2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetCoinbase(ctx context.Context, in *GetCoinbaseRequest, opts ...grpc.CallOption) (*GetCoinbaseResponse, error) {
	out := new(GetCoinbaseResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetCoinbase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTxPool(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTxPoolResponse, error) {
	out := new(GetTxPoolResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetTxPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTxPoolVerbose0(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTxPoolVerbose0Response, error) {
	out := new(GetTxPoolVerbose0Response)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetTxPoolVerbose0", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTxPoolVerbose1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTxPoolVerbose1Response, error) {
	out := new(GetTxPoolVerbose1Response)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetTxPoolVerbose1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetStakingTxPoolInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStakingTxPoolInfoResponse, error) {
	out := new(GetStakingTxPoolInfoResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetStakingTxPoolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetStakingTxPoolAwardRecord(ctx context.Context, in *GetStakingTxPoolAwardRecordRequest, opts ...grpc.CallOption) (*GetStakingTxPoolAwardRecordResponse, error) {
	out := new(GetStakingTxPoolAwardRecordResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetStakingTxPoolAwardRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetRawTransaction(ctx context.Context, in *GetRawTransactionRequest, opts ...grpc.CallOption) (*TxRawResult, error) {
	out := new(TxRawResult)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetRawTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetCapacitySpaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WorkSpacesResponse, error) {
	out := new(WorkSpacesResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetCapacitySpaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ConfigureCapacity(ctx context.Context, in *ConfigureSpaceKeeperRequest, opts ...grpc.CallOption) (*WorkSpacesResponse, error) {
	out := new(WorkSpacesResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/ConfigureCapacity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetCapacitySpacesByDirs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WorkSpacesByDirsResponse, error) {
	out := new(WorkSpacesByDirsResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetCapacitySpacesByDirs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ConfigureCapacityByDirs(ctx context.Context, in *ConfigureSpaceKeeperByDirsRequest, opts ...grpc.CallOption) (*WorkSpacesByDirsResponse, error) {
	out := new(WorkSpacesByDirsResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/ConfigureCapacityByDirs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetCapacitySpace(ctx context.Context, in *WorkSpaceRequest, opts ...grpc.CallOption) (*WorkSpaceResponse, error) {
	out := new(WorkSpaceResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetCapacitySpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) PlotCapacitySpaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ActOnSpaceKeeperResponse, error) {
	out := new(ActOnSpaceKeeperResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/PlotCapacitySpaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) PlotCapacitySpace(ctx context.Context, in *WorkSpaceRequest, opts ...grpc.CallOption) (*ActOnSpaceKeeperResponse, error) {
	out := new(ActOnSpaceKeeperResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/PlotCapacitySpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) MineCapacitySpaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ActOnSpaceKeeperResponse, error) {
	out := new(ActOnSpaceKeeperResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/MineCapacitySpaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) MineCapacitySpace(ctx context.Context, in *WorkSpaceRequest, opts ...grpc.CallOption) (*ActOnSpaceKeeperResponse, error) {
	out := new(ActOnSpaceKeeperResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/MineCapacitySpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) StopCapacitySpaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ActOnSpaceKeeperResponse, error) {
	out := new(ActOnSpaceKeeperResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/StopCapacitySpaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) StopCapacitySpace(ctx context.Context, in *WorkSpaceRequest, opts ...grpc.CallOption) (*ActOnSpaceKeeperResponse, error) {
	out := new(ActOnSpaceKeeperResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/StopCapacitySpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetClientStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetClientStatusResponse, error) {
	out := new(GetClientStatusResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetClientStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) QuitClient(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*QuitClientResponse, error) {
	out := new(QuitClientResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/QuitClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ExportKeystore(ctx context.Context, in *ExportKeystoreRequest, opts ...grpc.CallOption) (*ExportKeystoreResponse, error) {
	out := new(ExportKeystoreResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/ExportKeystore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ImportKeystore(ctx context.Context, in *ImportKeystoreRequest, opts ...grpc.CallOption) (*ImportKeystoreResponse, error) {
	out := new(ImportKeystoreResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/ImportKeystore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetKeystore(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetKeystoreResponse, error) {
	out := new(GetKeystoreResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetKeystore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UnlockWallet(ctx context.Context, in *UnlockWalletRequest, opts ...grpc.CallOption) (*UnlockWalletResponse, error) {
	out := new(UnlockWalletResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/UnlockWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) LockWallet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LockWalletResponse, error) {
	out := new(LockWalletResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/LockWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ChangePrivatePass(ctx context.Context, in *ChangePrivatePassRequest, opts ...grpc.CallOption) (*ChangePrivatePassResponse, error) {
	out := new(ChangePrivatePassResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/ChangePrivatePass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ChangePublicPass(ctx context.Context, in *ChangePublicPassRequest, opts ...grpc.CallOption) (*ChangePublicPassResponse, error) {
	out := new(ChangePublicPassResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/ChangePublicPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetGovernanceConfig(ctx context.Context, in *GetGovernanceConfigRequest, opts ...grpc.CallOption) (*GetGovernanceConfigResponse, error) {
	out := new(GetGovernanceConfigResponse)
	err := c.cc.Invoke(ctx, "/rpcprotobuf.ApiService/GetGovernanceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
type ApiServiceServer interface {
	GetBestBlock(context.Context, *emptypb.Empty) (*GetBestBlockResponse, error)
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	GetBlockHashByHeight(context.Context, *GetBlockHashByHeightRequest) (*GetBlockHashByHeightResponse, error)
	GetBlockByHeight(context.Context, *GetBlockByHeightRequest) (*GetBlockResponse, error)
	GetBlockHeader(context.Context, *GetBlockHeaderRequest) (*GetBlockHeaderResponse, error)
	GetBlockHeightByPubKey(context.Context, *GetBlockHeightByPubKeyRequest) (*GetBlockHeightByPubKeyResponse, error)
	GetBlockV2(context.Context, *GetBlockRequestV2) (*GetBlockResponseV2, error)
	GetBlockHeaderV2(context.Context, *GetBlockRequestV2) (*GetBlockHeaderResponse, error)
	GetBlockVerbose1V2(context.Context, *GetBlockRequestV2) (*GetBlockResponse, error)
	GetCoinbase(context.Context, *GetCoinbaseRequest) (*GetCoinbaseResponse, error)
	GetTxPool(context.Context, *emptypb.Empty) (*GetTxPoolResponse, error)
	GetTxPoolVerbose0(context.Context, *emptypb.Empty) (*GetTxPoolVerbose0Response, error)
	GetTxPoolVerbose1(context.Context, *emptypb.Empty) (*GetTxPoolVerbose1Response, error)
	GetStakingTxPoolInfo(context.Context, *emptypb.Empty) (*GetStakingTxPoolInfoResponse, error)
	GetStakingTxPoolAwardRecord(context.Context, *GetStakingTxPoolAwardRecordRequest) (*GetStakingTxPoolAwardRecordResponse, error)
	//get tx from chain db or mempool
	GetRawTransaction(context.Context, *GetRawTransactionRequest) (*TxRawResult, error)
	GetCapacitySpaces(context.Context, *emptypb.Empty) (*WorkSpacesResponse, error)
	ConfigureCapacity(context.Context, *ConfigureSpaceKeeperRequest) (*WorkSpacesResponse, error)
	GetCapacitySpacesByDirs(context.Context, *emptypb.Empty) (*WorkSpacesByDirsResponse, error)
	ConfigureCapacityByDirs(context.Context, *ConfigureSpaceKeeperByDirsRequest) (*WorkSpacesByDirsResponse, error)
	GetCapacitySpace(context.Context, *WorkSpaceRequest) (*WorkSpaceResponse, error)
	PlotCapacitySpaces(context.Context, *emptypb.Empty) (*ActOnSpaceKeeperResponse, error)
	PlotCapacitySpace(context.Context, *WorkSpaceRequest) (*ActOnSpaceKeeperResponse, error)
	MineCapacitySpaces(context.Context, *emptypb.Empty) (*ActOnSpaceKeeperResponse, error)
	MineCapacitySpace(context.Context, *WorkSpaceRequest) (*ActOnSpaceKeeperResponse, error)
	StopCapacitySpaces(context.Context, *emptypb.Empty) (*ActOnSpaceKeeperResponse, error)
	StopCapacitySpace(context.Context, *WorkSpaceRequest) (*ActOnSpaceKeeperResponse, error)
	GetClientStatus(context.Context, *emptypb.Empty) (*GetClientStatusResponse, error)
	QuitClient(context.Context, *emptypb.Empty) (*QuitClientResponse, error)
	ExportKeystore(context.Context, *ExportKeystoreRequest) (*ExportKeystoreResponse, error)
	ImportKeystore(context.Context, *ImportKeystoreRequest) (*ImportKeystoreResponse, error)
	GetKeystore(context.Context, *emptypb.Empty) (*GetKeystoreResponse, error)
	UnlockWallet(context.Context, *UnlockWalletRequest) (*UnlockWalletResponse, error)
	LockWallet(context.Context, *emptypb.Empty) (*LockWalletResponse, error)
	ChangePrivatePass(context.Context, *ChangePrivatePassRequest) (*ChangePrivatePassResponse, error)
	ChangePublicPass(context.Context, *ChangePublicPassRequest) (*ChangePublicPassResponse, error)
	GetGovernanceConfig(context.Context, *GetGovernanceConfigRequest) (*GetGovernanceConfigResponse, error)
}

// UnimplementedApiServiceServer can be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (*UnimplementedApiServiceServer) GetBestBlock(context.Context, *emptypb.Empty) (*GetBestBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBestBlock not implemented")
}
func (*UnimplementedApiServiceServer) GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedApiServiceServer) GetBlockHashByHeight(context.Context, *GetBlockHashByHeightRequest) (*GetBlockHashByHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHashByHeight not implemented")
}
func (*UnimplementedApiServiceServer) GetBlockByHeight(context.Context, *GetBlockByHeightRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHeight not implemented")
}
func (*UnimplementedApiServiceServer) GetBlockHeader(context.Context, *GetBlockHeaderRequest) (*GetBlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeader not implemented")
}
func (*UnimplementedApiServiceServer) GetBlockHeightByPubKey(context.Context, *GetBlockHeightByPubKeyRequest) (*GetBlockHeightByPubKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeightByPubKey not implemented")
}
func (*UnimplementedApiServiceServer) GetBlockV2(context.Context, *GetBlockRequestV2) (*GetBlockResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockV2 not implemented")
}
func (*UnimplementedApiServiceServer) GetBlockHeaderV2(context.Context, *GetBlockRequestV2) (*GetBlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeaderV2 not implemented")
}
func (*UnimplementedApiServiceServer) GetBlockVerbose1V2(context.Context, *GetBlockRequestV2) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockVerbose1V2 not implemented")
}
func (*UnimplementedApiServiceServer) GetCoinbase(context.Context, *GetCoinbaseRequest) (*GetCoinbaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinbase not implemented")
}
func (*UnimplementedApiServiceServer) GetTxPool(context.Context, *emptypb.Empty) (*GetTxPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxPool not implemented")
}
func (*UnimplementedApiServiceServer) GetTxPoolVerbose0(context.Context, *emptypb.Empty) (*GetTxPoolVerbose0Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxPoolVerbose0 not implemented")
}
func (*UnimplementedApiServiceServer) GetTxPoolVerbose1(context.Context, *emptypb.Empty) (*GetTxPoolVerbose1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxPoolVerbose1 not implemented")
}
func (*UnimplementedApiServiceServer) GetStakingTxPoolInfo(context.Context, *emptypb.Empty) (*GetStakingTxPoolInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakingTxPoolInfo not implemented")
}
func (*UnimplementedApiServiceServer) GetStakingTxPoolAwardRecord(context.Context, *GetStakingTxPoolAwardRecordRequest) (*GetStakingTxPoolAwardRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakingTxPoolAwardRecord not implemented")
}
func (*UnimplementedApiServiceServer) GetRawTransaction(context.Context, *GetRawTransactionRequest) (*TxRawResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawTransaction not implemented")
}
func (*UnimplementedApiServiceServer) GetCapacitySpaces(context.Context, *emptypb.Empty) (*WorkSpacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapacitySpaces not implemented")
}
func (*UnimplementedApiServiceServer) ConfigureCapacity(context.Context, *ConfigureSpaceKeeperRequest) (*WorkSpacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureCapacity not implemented")
}
func (*UnimplementedApiServiceServer) GetCapacitySpacesByDirs(context.Context, *emptypb.Empty) (*WorkSpacesByDirsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapacitySpacesByDirs not implemented")
}
func (*UnimplementedApiServiceServer) ConfigureCapacityByDirs(context.Context, *ConfigureSpaceKeeperByDirsRequest) (*WorkSpacesByDirsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureCapacityByDirs not implemented")
}
func (*UnimplementedApiServiceServer) GetCapacitySpace(context.Context, *WorkSpaceRequest) (*WorkSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapacitySpace not implemented")
}
func (*UnimplementedApiServiceServer) PlotCapacitySpaces(context.Context, *emptypb.Empty) (*ActOnSpaceKeeperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlotCapacitySpaces not implemented")
}
func (*UnimplementedApiServiceServer) PlotCapacitySpace(context.Context, *WorkSpaceRequest) (*ActOnSpaceKeeperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlotCapacitySpace not implemented")
}
func (*UnimplementedApiServiceServer) MineCapacitySpaces(context.Context, *emptypb.Empty) (*ActOnSpaceKeeperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MineCapacitySpaces not implemented")
}
func (*UnimplementedApiServiceServer) MineCapacitySpace(context.Context, *WorkSpaceRequest) (*ActOnSpaceKeeperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MineCapacitySpace not implemented")
}
func (*UnimplementedApiServiceServer) StopCapacitySpaces(context.Context, *emptypb.Empty) (*ActOnSpaceKeeperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCapacitySpaces not implemented")
}
func (*UnimplementedApiServiceServer) StopCapacitySpace(context.Context, *WorkSpaceRequest) (*ActOnSpaceKeeperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCapacitySpace not implemented")
}
func (*UnimplementedApiServiceServer) GetClientStatus(context.Context, *emptypb.Empty) (*GetClientStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientStatus not implemented")
}
func (*UnimplementedApiServiceServer) QuitClient(context.Context, *emptypb.Empty) (*QuitClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitClient not implemented")
}
func (*UnimplementedApiServiceServer) ExportKeystore(context.Context, *ExportKeystoreRequest) (*ExportKeystoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportKeystore not implemented")
}
func (*UnimplementedApiServiceServer) ImportKeystore(context.Context, *ImportKeystoreRequest) (*ImportKeystoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportKeystore not implemented")
}
func (*UnimplementedApiServiceServer) GetKeystore(context.Context, *emptypb.Empty) (*GetKeystoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeystore not implemented")
}
func (*UnimplementedApiServiceServer) UnlockWallet(context.Context, *UnlockWalletRequest) (*UnlockWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockWallet not implemented")
}
func (*UnimplementedApiServiceServer) LockWallet(context.Context, *emptypb.Empty) (*LockWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockWallet not implemented")
}
func (*UnimplementedApiServiceServer) ChangePrivatePass(context.Context, *ChangePrivatePassRequest) (*ChangePrivatePassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePrivatePass not implemented")
}
func (*UnimplementedApiServiceServer) ChangePublicPass(context.Context, *ChangePublicPassRequest) (*ChangePublicPassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePublicPass not implemented")
}
func (*UnimplementedApiServiceServer) GetGovernanceConfig(context.Context, *GetGovernanceConfigRequest) (*GetGovernanceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGovernanceConfig not implemented")
}

func RegisterApiServiceServer(s *grpc.Server, srv ApiServiceServer) {
	s.RegisterService(&_ApiService_serviceDesc, srv)
}

func _ApiService_GetBestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetBestBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBestBlock(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlockHashByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockHashByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlockHashByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetBlockHashByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlockHashByHeight(ctx, req.(*GetBlockHashByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlockByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlockByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetBlockByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlockByHeight(ctx, req.(*GetBlockByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetBlockHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlockHeader(ctx, req.(*GetBlockHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlockHeightByPubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockHeightByPubKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlockHeightByPubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetBlockHeightByPubKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlockHeightByPubKey(ctx, req.(*GetBlockHeightByPubKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlockV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlockV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetBlockV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlockV2(ctx, req.(*GetBlockRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlockHeaderV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlockHeaderV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetBlockHeaderV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlockHeaderV2(ctx, req.(*GetBlockRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlockVerbose1V2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlockVerbose1V2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetBlockVerbose1V2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlockVerbose1V2(ctx, req.(*GetBlockRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetCoinbase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinbaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCoinbase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetCoinbase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCoinbase(ctx, req.(*GetCoinbaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTxPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTxPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetTxPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTxPool(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTxPoolVerbose0_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTxPoolVerbose0(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetTxPoolVerbose0",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTxPoolVerbose0(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTxPoolVerbose1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTxPoolVerbose1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetTxPoolVerbose1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTxPoolVerbose1(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetStakingTxPoolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetStakingTxPoolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetStakingTxPoolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetStakingTxPoolInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetStakingTxPoolAwardRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakingTxPoolAwardRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetStakingTxPoolAwardRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetStakingTxPoolAwardRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetStakingTxPoolAwardRecord(ctx, req.(*GetStakingTxPoolAwardRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRawTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetRawTransaction(ctx, req.(*GetRawTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetCapacitySpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCapacitySpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetCapacitySpaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCapacitySpaces(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ConfigureCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureSpaceKeeperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ConfigureCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/ConfigureCapacity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ConfigureCapacity(ctx, req.(*ConfigureSpaceKeeperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetCapacitySpacesByDirs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCapacitySpacesByDirs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetCapacitySpacesByDirs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCapacitySpacesByDirs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ConfigureCapacityByDirs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureSpaceKeeperByDirsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ConfigureCapacityByDirs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/ConfigureCapacityByDirs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ConfigureCapacityByDirs(ctx, req.(*ConfigureSpaceKeeperByDirsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetCapacitySpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCapacitySpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetCapacitySpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCapacitySpace(ctx, req.(*WorkSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_PlotCapacitySpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).PlotCapacitySpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/PlotCapacitySpaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).PlotCapacitySpaces(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_PlotCapacitySpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).PlotCapacitySpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/PlotCapacitySpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).PlotCapacitySpace(ctx, req.(*WorkSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_MineCapacitySpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).MineCapacitySpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/MineCapacitySpaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).MineCapacitySpaces(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_MineCapacitySpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).MineCapacitySpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/MineCapacitySpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).MineCapacitySpace(ctx, req.(*WorkSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_StopCapacitySpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).StopCapacitySpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/StopCapacitySpaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).StopCapacitySpaces(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_StopCapacitySpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).StopCapacitySpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/StopCapacitySpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).StopCapacitySpace(ctx, req.(*WorkSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetClientStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetClientStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetClientStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetClientStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_QuitClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).QuitClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/QuitClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).QuitClient(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ExportKeystore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportKeystoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ExportKeystore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/ExportKeystore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ExportKeystore(ctx, req.(*ExportKeystoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ImportKeystore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportKeystoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ImportKeystore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/ImportKeystore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ImportKeystore(ctx, req.(*ImportKeystoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetKeystore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetKeystore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetKeystore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetKeystore(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UnlockWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UnlockWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/UnlockWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UnlockWallet(ctx, req.(*UnlockWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_LockWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).LockWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/LockWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).LockWallet(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ChangePrivatePass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePrivatePassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ChangePrivatePass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/ChangePrivatePass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ChangePrivatePass(ctx, req.(*ChangePrivatePassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ChangePublicPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePublicPassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ChangePublicPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/ChangePublicPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ChangePublicPass(ctx, req.(*ChangePublicPassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetGovernanceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGovernanceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetGovernanceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotobuf.ApiService/GetGovernanceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetGovernanceConfig(ctx, req.(*GetGovernanceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcprotobuf.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBestBlock",
			Handler:    _ApiService_GetBestBlock_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _ApiService_GetBlock_Handler,
		},
		{
			MethodName: "GetBlockHashByHeight",
			Handler:    _ApiService_GetBlockHashByHeight_Handler,
		},
		{
			MethodName: "GetBlockByHeight",
			Handler:    _ApiService_GetBlockByHeight_Handler,
		},
		{
			MethodName: "GetBlockHeader",
			Handler:    _ApiService_GetBlockHeader_Handler,
		},
		{
			MethodName: "GetBlockHeightByPubKey",
			Handler:    _ApiService_GetBlockHeightByPubKey_Handler,
		},
		{
			MethodName: "GetBlockV2",
			Handler:    _ApiService_GetBlockV2_Handler,
		},
		{
			MethodName: "GetBlockHeaderV2",
			Handler:    _ApiService_GetBlockHeaderV2_Handler,
		},
		{
			MethodName: "GetBlockVerbose1V2",
			Handler:    _ApiService_GetBlockVerbose1V2_Handler,
		},
		{
			MethodName: "GetCoinbase",
			Handler:    _ApiService_GetCoinbase_Handler,
		},
		{
			MethodName: "GetTxPool",
			Handler:    _ApiService_GetTxPool_Handler,
		},
		{
			MethodName: "GetTxPoolVerbose0",
			Handler:    _ApiService_GetTxPoolVerbose0_Handler,
		},
		{
			MethodName: "GetTxPoolVerbose1",
			Handler:    _ApiService_GetTxPoolVerbose1_Handler,
		},
		{
			MethodName: "GetStakingTxPoolInfo",
			Handler:    _ApiService_GetStakingTxPoolInfo_Handler,
		},
		{
			MethodName: "GetStakingTxPoolAwardRecord",
			Handler:    _ApiService_GetStakingTxPoolAwardRecord_Handler,
		},
		{
			MethodName: "GetRawTransaction",
			Handler:    _ApiService_GetRawTransaction_Handler,
		},
		{
			MethodName: "GetCapacitySpaces",
			Handler:    _ApiService_GetCapacitySpaces_Handler,
		},
		{
			MethodName: "ConfigureCapacity",
			Handler:    _ApiService_ConfigureCapacity_Handler,
		},
		{
			MethodName: "GetCapacitySpacesByDirs",
			Handler:    _ApiService_GetCapacitySpacesByDirs_Handler,
		},
		{
			MethodName: "ConfigureCapacityByDirs",
			Handler:    _ApiService_ConfigureCapacityByDirs_Handler,
		},
		{
			MethodName: "GetCapacitySpace",
			Handler:    _ApiService_GetCapacitySpace_Handler,
		},
		{
			MethodName: "PlotCapacitySpaces",
			Handler:    _ApiService_PlotCapacitySpaces_Handler,
		},
		{
			MethodName: "PlotCapacitySpace",
			Handler:    _ApiService_PlotCapacitySpace_Handler,
		},
		{
			MethodName: "MineCapacitySpaces",
			Handler:    _ApiService_MineCapacitySpaces_Handler,
		},
		{
			MethodName: "MineCapacitySpace",
			Handler:    _ApiService_MineCapacitySpace_Handler,
		},
		{
			MethodName: "StopCapacitySpaces",
			Handler:    _ApiService_StopCapacitySpaces_Handler,
		},
		{
			MethodName: "StopCapacitySpace",
			Handler:    _ApiService_StopCapacitySpace_Handler,
		},
		{
			MethodName: "GetClientStatus",
			Handler:    _ApiService_GetClientStatus_Handler,
		},
		{
			MethodName: "QuitClient",
			Handler:    _ApiService_QuitClient_Handler,
		},
		{
			MethodName: "ExportKeystore",
			Handler:    _ApiService_ExportKeystore_Handler,
		},
		{
			MethodName: "ImportKeystore",
			Handler:    _ApiService_ImportKeystore_Handler,
		},
		{
			MethodName: "GetKeystore",
			Handler:    _ApiService_GetKeystore_Handler,
		},
		{
			MethodName: "UnlockWallet",
			Handler:    _ApiService_UnlockWallet_Handler,
		},
		{
			MethodName: "LockWallet",
			Handler:    _ApiService_LockWallet_Handler,
		},
		{
			MethodName: "ChangePrivatePass",
			Handler:    _ApiService_ChangePrivatePass_Handler,
		},
		{
			MethodName: "ChangePublicPass",
			Handler:    _ApiService_ChangePublicPass_Handler,
		},
		{
			MethodName: "GetGovernanceConfig",
			Handler:    _ApiService_GetGovernanceConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
